// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package vision_test

import (
	"context"

	vision "github.com/animeapis/api-go-client/vision/v1alpha1"
	visionpb "github.com/animeapis/go-genproto/vision/v1alpha1"
)

func ExampleNewImageAnnotatorClient() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleImageAnnotatorClient_CreateImageReport() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.CreateImageReportRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateImageReport(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_ListImageReports() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.ListImageReportsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListImageReports(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_GetImageReport() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.GetImageReportRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetImageReport(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_DeleteImageReport() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.DeleteImageReportRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteImageReport(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleImageAnnotatorClient_CreateImageAnnotationHint() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.CreateImageAnnotationHintRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateImageAnnotationHint(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_ListImageAnnotationHints() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.ListImageAnnotationHintsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListImageAnnotationHints(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_GetImageAnnotationHint() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.GetImageAnnotationHintRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetImageAnnotationHint(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_UpdateImageAnnotationHint() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.UpdateImageAnnotationHintRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateImageAnnotationHint(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleImageAnnotatorClient_DeleteImageAnnotationHint() {
	ctx := context.Background()
	c, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &visionpb.DeleteImageAnnotationHintRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteImageAnnotationHint(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}
