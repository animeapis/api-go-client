// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package vision

import (
	"context"
	"fmt"
	"math"
	"net/url"

	visionpb "github.com/animeapis/go-genproto/vision/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	CreateImageReport         []gax.CallOption
	ListImageReports          []gax.CallOption
	GetImageReport            []gax.CallOption
	DeleteImageReport         []gax.CallOption
	CreateImageAnnotationHint []gax.CallOption
	ListImageAnnotationHints  []gax.CallOption
	GetImageAnnotationHint    []gax.CallOption
	UpdateImageAnnotationHint []gax.CallOption
	DeleteImageAnnotationHint []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("vision.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("vision.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://vision.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		CreateImageReport:         []gax.CallOption{},
		ListImageReports:          []gax.CallOption{},
		GetImageReport:            []gax.CallOption{},
		DeleteImageReport:         []gax.CallOption{},
		CreateImageAnnotationHint: []gax.CallOption{},
		ListImageAnnotationHints:  []gax.CallOption{},
		GetImageAnnotationHint:    []gax.CallOption{},
		UpdateImageAnnotationHint: []gax.CallOption{},
		DeleteImageAnnotationHint: []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods availaible from Vision API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateImageReport(context.Context, *visionpb.CreateImageReportRequest, ...gax.CallOption) (*visionpb.ImageReport, error)
	ListImageReports(context.Context, *visionpb.ListImageReportsRequest, ...gax.CallOption) (*visionpb.ListImageReportsResponse, error)
	GetImageReport(context.Context, *visionpb.GetImageReportRequest, ...gax.CallOption) (*visionpb.ImageReport, error)
	DeleteImageReport(context.Context, *visionpb.DeleteImageReportRequest, ...gax.CallOption) error
	CreateImageAnnotationHint(context.Context, *visionpb.CreateImageAnnotationHintRequest, ...gax.CallOption) (*visionpb.ImageAnnotationHint, error)
	ListImageAnnotationHints(context.Context, *visionpb.ListImageAnnotationHintsRequest, ...gax.CallOption) (*visionpb.ListImageAnnotationHintsResponse, error)
	GetImageAnnotationHint(context.Context, *visionpb.GetImageAnnotationHintRequest, ...gax.CallOption) (*visionpb.ImageAnnotationHint, error)
	UpdateImageAnnotationHint(context.Context, *visionpb.UpdateImageAnnotationHintRequest, ...gax.CallOption) (*visionpb.ImageAnnotationHint, error)
	DeleteImageAnnotationHint(context.Context, *visionpb.DeleteImageAnnotationHintRequest, ...gax.CallOption) error
}

// Client is a client for interacting with Vision API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *Client) CreateImageReport(ctx context.Context, req *visionpb.CreateImageReportRequest, opts ...gax.CallOption) (*visionpb.ImageReport, error) {
	return c.internalClient.CreateImageReport(ctx, req, opts...)
}

func (c *Client) ListImageReports(ctx context.Context, req *visionpb.ListImageReportsRequest, opts ...gax.CallOption) (*visionpb.ListImageReportsResponse, error) {
	return c.internalClient.ListImageReports(ctx, req, opts...)
}

func (c *Client) GetImageReport(ctx context.Context, req *visionpb.GetImageReportRequest, opts ...gax.CallOption) (*visionpb.ImageReport, error) {
	return c.internalClient.GetImageReport(ctx, req, opts...)
}

func (c *Client) DeleteImageReport(ctx context.Context, req *visionpb.DeleteImageReportRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteImageReport(ctx, req, opts...)
}

func (c *Client) CreateImageAnnotationHint(ctx context.Context, req *visionpb.CreateImageAnnotationHintRequest, opts ...gax.CallOption) (*visionpb.ImageAnnotationHint, error) {
	return c.internalClient.CreateImageAnnotationHint(ctx, req, opts...)
}

func (c *Client) ListImageAnnotationHints(ctx context.Context, req *visionpb.ListImageAnnotationHintsRequest, opts ...gax.CallOption) (*visionpb.ListImageAnnotationHintsResponse, error) {
	return c.internalClient.ListImageAnnotationHints(ctx, req, opts...)
}

func (c *Client) GetImageAnnotationHint(ctx context.Context, req *visionpb.GetImageAnnotationHintRequest, opts ...gax.CallOption) (*visionpb.ImageAnnotationHint, error) {
	return c.internalClient.GetImageAnnotationHint(ctx, req, opts...)
}

func (c *Client) UpdateImageAnnotationHint(ctx context.Context, req *visionpb.UpdateImageAnnotationHintRequest, opts ...gax.CallOption) (*visionpb.ImageAnnotationHint, error) {
	return c.internalClient.UpdateImageAnnotationHint(ctx, req, opts...)
}

func (c *Client) DeleteImageAnnotationHint(ctx context.Context, req *visionpb.DeleteImageAnnotationHintRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteImageAnnotationHint(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Vision API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client visionpb.VisionClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new vision client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		client:           visionpb.NewVisionClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) CreateImageReport(ctx context.Context, req *visionpb.CreateImageReportRequest, opts ...gax.CallOption) (*visionpb.ImageReport, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateImageReport[0:len((*c.CallOptions).CreateImageReport):len((*c.CallOptions).CreateImageReport)], opts...)
	var resp *visionpb.ImageReport
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateImageReport(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListImageReports(ctx context.Context, req *visionpb.ListImageReportsRequest, opts ...gax.CallOption) (*visionpb.ListImageReportsResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListImageReports[0:len((*c.CallOptions).ListImageReports):len((*c.CallOptions).ListImageReports)], opts...)
	var resp *visionpb.ListImageReportsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ListImageReports(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetImageReport(ctx context.Context, req *visionpb.GetImageReportRequest, opts ...gax.CallOption) (*visionpb.ImageReport, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetImageReport[0:len((*c.CallOptions).GetImageReport):len((*c.CallOptions).GetImageReport)], opts...)
	var resp *visionpb.ImageReport
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetImageReport(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteImageReport(ctx context.Context, req *visionpb.DeleteImageReportRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteImageReport[0:len((*c.CallOptions).DeleteImageReport):len((*c.CallOptions).DeleteImageReport)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteImageReport(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) CreateImageAnnotationHint(ctx context.Context, req *visionpb.CreateImageAnnotationHintRequest, opts ...gax.CallOption) (*visionpb.ImageAnnotationHint, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateImageAnnotationHint[0:len((*c.CallOptions).CreateImageAnnotationHint):len((*c.CallOptions).CreateImageAnnotationHint)], opts...)
	var resp *visionpb.ImageAnnotationHint
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateImageAnnotationHint(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListImageAnnotationHints(ctx context.Context, req *visionpb.ListImageAnnotationHintsRequest, opts ...gax.CallOption) (*visionpb.ListImageAnnotationHintsResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListImageAnnotationHints[0:len((*c.CallOptions).ListImageAnnotationHints):len((*c.CallOptions).ListImageAnnotationHints)], opts...)
	var resp *visionpb.ListImageAnnotationHintsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ListImageAnnotationHints(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetImageAnnotationHint(ctx context.Context, req *visionpb.GetImageAnnotationHintRequest, opts ...gax.CallOption) (*visionpb.ImageAnnotationHint, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetImageAnnotationHint[0:len((*c.CallOptions).GetImageAnnotationHint):len((*c.CallOptions).GetImageAnnotationHint)], opts...)
	var resp *visionpb.ImageAnnotationHint
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetImageAnnotationHint(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateImageAnnotationHint(ctx context.Context, req *visionpb.UpdateImageAnnotationHintRequest, opts ...gax.CallOption) (*visionpb.ImageAnnotationHint, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "hint.name", url.QueryEscape(req.GetHint().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateImageAnnotationHint[0:len((*c.CallOptions).UpdateImageAnnotationHint):len((*c.CallOptions).UpdateImageAnnotationHint)], opts...)
	var resp *visionpb.ImageAnnotationHint
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateImageAnnotationHint(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteImageAnnotationHint(ctx context.Context, req *visionpb.DeleteImageAnnotationHintRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteImageAnnotationHint[0:len((*c.CallOptions).DeleteImageAnnotationHint):len((*c.CallOptions).DeleteImageAnnotationHint)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteImageAnnotationHint(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}
