// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package identity

import (
	"context"
	"fmt"
	"math"
	"net/url"

	identitypb "github.com/animeapis/go-genproto/identity/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	GetUserProfile     []gax.CallOption
	GetUser            []gax.CallOption
	ListUsers          []gax.CallOption
	CreateUser         []gax.CallOption
	UpdateUser         []gax.CallOption
	DeleteUser         []gax.CallOption
	GetUserSettings    []gax.CallOption
	UpdateUserSettings []gax.CallOption
	GetGroup           []gax.CallOption
	ListGroups         []gax.CallOption
	CreateGroup        []gax.CallOption
	UpdateGroup        []gax.CallOption
	DeleteGroup        []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("identity.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("identity.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://identity.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		GetUserProfile:     []gax.CallOption{},
		GetUser:            []gax.CallOption{},
		ListUsers:          []gax.CallOption{},
		CreateUser:         []gax.CallOption{},
		UpdateUser:         []gax.CallOption{},
		DeleteUser:         []gax.CallOption{},
		GetUserSettings:    []gax.CallOption{},
		UpdateUserSettings: []gax.CallOption{},
		GetGroup:           []gax.CallOption{},
		ListGroups:         []gax.CallOption{},
		CreateGroup:        []gax.CallOption{},
		UpdateGroup:        []gax.CallOption{},
		DeleteGroup:        []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods availaible from Identity API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetUserProfile(context.Context, *identitypb.GetUserProfileRequest, ...gax.CallOption) (*identitypb.UserProfile, error)
	GetUser(context.Context, *identitypb.GetUserRequest, ...gax.CallOption) (*identitypb.User, error)
	ListUsers(context.Context, *identitypb.ListUsersRequest, ...gax.CallOption) *UserIterator
	CreateUser(context.Context, *identitypb.CreateUserRequest, ...gax.CallOption) (*identitypb.User, error)
	UpdateUser(context.Context, *identitypb.UpdateUserRequest, ...gax.CallOption) (*identitypb.User, error)
	DeleteUser(context.Context, *identitypb.DeleteUserRequest, ...gax.CallOption) error
	GetUserSettings(context.Context, *identitypb.GetUserSettingsRequest, ...gax.CallOption) (*identitypb.UserSettings, error)
	UpdateUserSettings(context.Context, *identitypb.UpdateUserSettingsRequest, ...gax.CallOption) (*identitypb.UserSettings, error)
	GetGroup(context.Context, *identitypb.GetGroupRequest, ...gax.CallOption) (*identitypb.Group, error)
	ListGroups(context.Context, *identitypb.ListGroupsRequest, ...gax.CallOption) *GroupIterator
	CreateGroup(context.Context, *identitypb.CreateGroupRequest, ...gax.CallOption) (*identitypb.Group, error)
	UpdateGroup(context.Context, *identitypb.UpdateGroupRequest, ...gax.CallOption) (*identitypb.Group, error)
	DeleteGroup(context.Context, *identitypb.DeleteGroupRequest, ...gax.CallOption) error
}

// Client is a client for interacting with Identity API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *Client) GetUserProfile(ctx context.Context, req *identitypb.GetUserProfileRequest, opts ...gax.CallOption) (*identitypb.UserProfile, error) {
	return c.internalClient.GetUserProfile(ctx, req, opts...)
}

func (c *Client) GetUser(ctx context.Context, req *identitypb.GetUserRequest, opts ...gax.CallOption) (*identitypb.User, error) {
	return c.internalClient.GetUser(ctx, req, opts...)
}

func (c *Client) ListUsers(ctx context.Context, req *identitypb.ListUsersRequest, opts ...gax.CallOption) *UserIterator {
	return c.internalClient.ListUsers(ctx, req, opts...)
}

func (c *Client) CreateUser(ctx context.Context, req *identitypb.CreateUserRequest, opts ...gax.CallOption) (*identitypb.User, error) {
	return c.internalClient.CreateUser(ctx, req, opts...)
}

func (c *Client) UpdateUser(ctx context.Context, req *identitypb.UpdateUserRequest, opts ...gax.CallOption) (*identitypb.User, error) {
	return c.internalClient.UpdateUser(ctx, req, opts...)
}

func (c *Client) DeleteUser(ctx context.Context, req *identitypb.DeleteUserRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteUser(ctx, req, opts...)
}

func (c *Client) GetUserSettings(ctx context.Context, req *identitypb.GetUserSettingsRequest, opts ...gax.CallOption) (*identitypb.UserSettings, error) {
	return c.internalClient.GetUserSettings(ctx, req, opts...)
}

func (c *Client) UpdateUserSettings(ctx context.Context, req *identitypb.UpdateUserSettingsRequest, opts ...gax.CallOption) (*identitypb.UserSettings, error) {
	return c.internalClient.UpdateUserSettings(ctx, req, opts...)
}

func (c *Client) GetGroup(ctx context.Context, req *identitypb.GetGroupRequest, opts ...gax.CallOption) (*identitypb.Group, error) {
	return c.internalClient.GetGroup(ctx, req, opts...)
}

func (c *Client) ListGroups(ctx context.Context, req *identitypb.ListGroupsRequest, opts ...gax.CallOption) *GroupIterator {
	return c.internalClient.ListGroups(ctx, req, opts...)
}

func (c *Client) CreateGroup(ctx context.Context, req *identitypb.CreateGroupRequest, opts ...gax.CallOption) (*identitypb.Group, error) {
	return c.internalClient.CreateGroup(ctx, req, opts...)
}

func (c *Client) UpdateGroup(ctx context.Context, req *identitypb.UpdateGroupRequest, opts ...gax.CallOption) (*identitypb.Group, error) {
	return c.internalClient.UpdateGroup(ctx, req, opts...)
}

func (c *Client) DeleteGroup(ctx context.Context, req *identitypb.DeleteGroupRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteGroup(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Identity API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client identitypb.IdentityClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new identity client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		client:           identitypb.NewIdentityClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) GetUserProfile(ctx context.Context, req *identitypb.GetUserProfileRequest, opts ...gax.CallOption) (*identitypb.UserProfile, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetUserProfile[0:len((*c.CallOptions).GetUserProfile):len((*c.CallOptions).GetUserProfile)], opts...)
	var resp *identitypb.UserProfile
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetUserProfile(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetUser(ctx context.Context, req *identitypb.GetUserRequest, opts ...gax.CallOption) (*identitypb.User, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetUser[0:len((*c.CallOptions).GetUser):len((*c.CallOptions).GetUser)], opts...)
	var resp *identitypb.User
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetUser(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListUsers(ctx context.Context, req *identitypb.ListUsersRequest, opts ...gax.CallOption) *UserIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListUsers[0:len((*c.CallOptions).ListUsers):len((*c.CallOptions).ListUsers)], opts...)
	it := &UserIterator{}
	req = proto.Clone(req).(*identitypb.ListUsersRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*identitypb.User, string, error) {
		var resp *identitypb.ListUsersResponse
		req.PageToken = pageToken
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListUsers(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetUsers(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}
	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()
	return it
}

func (c *gRPCClient) CreateUser(ctx context.Context, req *identitypb.CreateUserRequest, opts ...gax.CallOption) (*identitypb.User, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateUser[0:len((*c.CallOptions).CreateUser):len((*c.CallOptions).CreateUser)], opts...)
	var resp *identitypb.User
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateUser(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateUser(ctx context.Context, req *identitypb.UpdateUserRequest, opts ...gax.CallOption) (*identitypb.User, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "user.name", url.QueryEscape(req.GetUser().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateUser[0:len((*c.CallOptions).UpdateUser):len((*c.CallOptions).UpdateUser)], opts...)
	var resp *identitypb.User
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateUser(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteUser(ctx context.Context, req *identitypb.DeleteUserRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteUser[0:len((*c.CallOptions).DeleteUser):len((*c.CallOptions).DeleteUser)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteUser(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) GetUserSettings(ctx context.Context, req *identitypb.GetUserSettingsRequest, opts ...gax.CallOption) (*identitypb.UserSettings, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetUserSettings[0:len((*c.CallOptions).GetUserSettings):len((*c.CallOptions).GetUserSettings)], opts...)
	var resp *identitypb.UserSettings
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetUserSettings(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateUserSettings(ctx context.Context, req *identitypb.UpdateUserSettingsRequest, opts ...gax.CallOption) (*identitypb.UserSettings, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "settings.name", url.QueryEscape(req.GetSettings().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateUserSettings[0:len((*c.CallOptions).UpdateUserSettings):len((*c.CallOptions).UpdateUserSettings)], opts...)
	var resp *identitypb.UserSettings
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateUserSettings(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetGroup(ctx context.Context, req *identitypb.GetGroupRequest, opts ...gax.CallOption) (*identitypb.Group, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetGroup[0:len((*c.CallOptions).GetGroup):len((*c.CallOptions).GetGroup)], opts...)
	var resp *identitypb.Group
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetGroup(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListGroups(ctx context.Context, req *identitypb.ListGroupsRequest, opts ...gax.CallOption) *GroupIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListGroups[0:len((*c.CallOptions).ListGroups):len((*c.CallOptions).ListGroups)], opts...)
	it := &GroupIterator{}
	req = proto.Clone(req).(*identitypb.ListGroupsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*identitypb.Group, string, error) {
		var resp *identitypb.ListGroupsResponse
		req.PageToken = pageToken
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListGroups(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetGroups(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}
	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()
	return it
}

func (c *gRPCClient) CreateGroup(ctx context.Context, req *identitypb.CreateGroupRequest, opts ...gax.CallOption) (*identitypb.Group, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateGroup[0:len((*c.CallOptions).CreateGroup):len((*c.CallOptions).CreateGroup)], opts...)
	var resp *identitypb.Group
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateGroup(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateGroup(ctx context.Context, req *identitypb.UpdateGroupRequest, opts ...gax.CallOption) (*identitypb.Group, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "group.name", url.QueryEscape(req.GetGroup().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateGroup[0:len((*c.CallOptions).UpdateGroup):len((*c.CallOptions).UpdateGroup)], opts...)
	var resp *identitypb.Group
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateGroup(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteGroup(ctx context.Context, req *identitypb.DeleteGroupRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteGroup[0:len((*c.CallOptions).DeleteGroup):len((*c.CallOptions).DeleteGroup)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteGroup(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

// GroupIterator manages a stream of *identitypb.Group.
type GroupIterator struct {
	items    []*identitypb.Group
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*identitypb.Group, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *GroupIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *GroupIterator) Next() (*identitypb.Group, error) {
	var item *identitypb.Group
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *GroupIterator) bufLen() int {
	return len(it.items)
}

func (it *GroupIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// UserIterator manages a stream of *identitypb.User.
type UserIterator struct {
	items    []*identitypb.User
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*identitypb.User, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *UserIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *UserIterator) Next() (*identitypb.User, error) {
	var item *identitypb.User
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *UserIterator) bufLen() int {
	return len(it.items)
}

func (it *UserIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
