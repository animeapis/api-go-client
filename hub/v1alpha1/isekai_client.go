// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package hub

import (
	"context"
	"fmt"
	"math"
	"net/url"

	hubpb "github.com/animeapis/go-genproto/hub/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newIsekaiClientHook clientHook

// IsekaiCallOptions contains the retry settings for each method of IsekaiClient.
type IsekaiCallOptions struct {
	CreateRepository []gax.CallOption
	DeleteRepository []gax.CallOption
}

func defaultIsekaiGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("hub.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("hub.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://hub.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultIsekaiCallOptions() *IsekaiCallOptions {
	return &IsekaiCallOptions{
		CreateRepository: []gax.CallOption{},
		DeleteRepository: []gax.CallOption{},
	}
}

// internalIsekaiClient is an interface that defines the methods availaible from Hub API.
type internalIsekaiClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateRepository(context.Context, *hubpb.CreateRepositoryRequest, ...gax.CallOption) (*hubpb.Repository, error)
	DeleteRepository(context.Context, *hubpb.DeleteRepositoryRequest, ...gax.CallOption) error
}

// IsekaiClient is a client for interacting with Hub API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type IsekaiClient struct {
	// The internal transport-dependent client.
	internalClient internalIsekaiClient

	// The call options for this service.
	CallOptions *IsekaiCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *IsekaiClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *IsekaiClient) setGoogleClientInfo(...string) {
	c.internalClient.setGoogleClientInfo()
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *IsekaiClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *IsekaiClient) CreateRepository(ctx context.Context, req *hubpb.CreateRepositoryRequest, opts ...gax.CallOption) (*hubpb.Repository, error) {
	return c.internalClient.CreateRepository(ctx, req, opts...)
}

func (c *IsekaiClient) DeleteRepository(ctx context.Context, req *hubpb.DeleteRepositoryRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteRepository(ctx, req, opts...)
}

// isekaiGRPCClient is a client for interacting with Hub API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type isekaiGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing IsekaiClient
	CallOptions **IsekaiCallOptions

	// The gRPC API client.
	isekaiClient hubpb.IsekaiClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewIsekaiClient creates a new isekai client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewIsekaiClient(ctx context.Context, opts ...option.ClientOption) (*IsekaiClient, error) {
	clientOpts := defaultIsekaiGRPCClientOptions()
	if newIsekaiClientHook != nil {
		hookOpts, err := newIsekaiClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := IsekaiClient{CallOptions: defaultIsekaiCallOptions()}

	c := &isekaiGRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		isekaiClient:     hubpb.NewIsekaiClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *isekaiGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *isekaiGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *isekaiGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *isekaiGRPCClient) CreateRepository(ctx context.Context, req *hubpb.CreateRepositoryRequest, opts ...gax.CallOption) (*hubpb.Repository, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateRepository[0:len((*c.CallOptions).CreateRepository):len((*c.CallOptions).CreateRepository)], opts...)
	var resp *hubpb.Repository
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.isekaiClient.CreateRepository(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *isekaiGRPCClient) DeleteRepository(ctx context.Context, req *hubpb.DeleteRepositoryRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteRepository[0:len((*c.CallOptions).DeleteRepository):len((*c.CallOptions).DeleteRepository)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.isekaiClient.DeleteRepository(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}
