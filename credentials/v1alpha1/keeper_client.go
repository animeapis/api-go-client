// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package credentials

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"math"
	"net/http"
	"net/url"

	credentialspb "github.com/animeapis/go-genproto/credentials/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newKeeperClientHook clientHook

// KeeperCallOptions contains the retry settings for each method of KeeperClient.
type KeeperCallOptions struct {
	GetCredentials    []gax.CallOption
	ListCredentials   []gax.CallOption
	CreateCredentials []gax.CallOption
	DeleteCredentials []gax.CallOption
	ActAsCredentials  []gax.CallOption
}

func defaultKeeperGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("credentials.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("credentials.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://credentials.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultKeeperCallOptions() *KeeperCallOptions {
	return &KeeperCallOptions{
		GetCredentials:    []gax.CallOption{},
		ListCredentials:   []gax.CallOption{},
		CreateCredentials: []gax.CallOption{},
		DeleteCredentials: []gax.CallOption{},
		ActAsCredentials:  []gax.CallOption{},
	}
}

func defaultKeeperRESTCallOptions() *KeeperCallOptions {
	return &KeeperCallOptions{
		GetCredentials:    []gax.CallOption{},
		ListCredentials:   []gax.CallOption{},
		CreateCredentials: []gax.CallOption{},
		DeleteCredentials: []gax.CallOption{},
		ActAsCredentials:  []gax.CallOption{},
	}
}

// internalKeeperClient is an interface that defines the methods available from Credentials API.
type internalKeeperClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetCredentials(context.Context, *credentialspb.GetCredentialsRequest, ...gax.CallOption) (*credentialspb.Credentials, error)
	ListCredentials(context.Context, *credentialspb.ListCredentialsRequest, ...gax.CallOption) *CredentialsIterator
	CreateCredentials(context.Context, *credentialspb.CreateCredentialsRequest, ...gax.CallOption) (*credentialspb.Credentials, error)
	DeleteCredentials(context.Context, *credentialspb.DeleteCredentialsRequest, ...gax.CallOption) error
	ActAsCredentials(context.Context, *credentialspb.ActAsCredentialsRequest, ...gax.CallOption) (*credentialspb.ActAsCredentialsResponse, error)
}

// KeeperClient is a client for interacting with Credentials API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type KeeperClient struct {
	// The internal transport-dependent client.
	internalClient internalKeeperClient

	// The call options for this service.
	CallOptions *KeeperCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *KeeperClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *KeeperClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *KeeperClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *KeeperClient) GetCredentials(ctx context.Context, req *credentialspb.GetCredentialsRequest, opts ...gax.CallOption) (*credentialspb.Credentials, error) {
	return c.internalClient.GetCredentials(ctx, req, opts...)
}

func (c *KeeperClient) ListCredentials(ctx context.Context, req *credentialspb.ListCredentialsRequest, opts ...gax.CallOption) *CredentialsIterator {
	return c.internalClient.ListCredentials(ctx, req, opts...)
}

func (c *KeeperClient) CreateCredentials(ctx context.Context, req *credentialspb.CreateCredentialsRequest, opts ...gax.CallOption) (*credentialspb.Credentials, error) {
	return c.internalClient.CreateCredentials(ctx, req, opts...)
}

func (c *KeeperClient) DeleteCredentials(ctx context.Context, req *credentialspb.DeleteCredentialsRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteCredentials(ctx, req, opts...)
}

func (c *KeeperClient) ActAsCredentials(ctx context.Context, req *credentialspb.ActAsCredentialsRequest, opts ...gax.CallOption) (*credentialspb.ActAsCredentialsResponse, error) {
	return c.internalClient.ActAsCredentials(ctx, req, opts...)
}

// keeperGRPCClient is a client for interacting with Credentials API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type keeperGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing KeeperClient
	CallOptions **KeeperCallOptions

	// The gRPC API client.
	keeperClient credentialspb.KeeperClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewKeeperClient creates a new keeper client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewKeeperClient(ctx context.Context, opts ...option.ClientOption) (*KeeperClient, error) {
	clientOpts := defaultKeeperGRPCClientOptions()
	if newKeeperClientHook != nil {
		hookOpts, err := newKeeperClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := KeeperClient{CallOptions: defaultKeeperCallOptions()}

	c := &keeperGRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		keeperClient:     credentialspb.NewKeeperClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *keeperGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *keeperGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *keeperGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type keeperRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD

	// Points back to the CallOptions field of the containing KeeperClient
	CallOptions **KeeperCallOptions
}

// NewKeeperRESTClient creates a new keeper rest client.
func NewKeeperRESTClient(ctx context.Context, opts ...option.ClientOption) (*KeeperClient, error) {
	clientOpts := append(defaultKeeperRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultKeeperRESTCallOptions()
	c := &keeperRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &KeeperClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultKeeperRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://credentials.animeapis.com"),
		internaloption.WithDefaultMTLSEndpoint("https://credentials.animeapis.com"),
		internaloption.WithDefaultAudience("https://credentials.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *keeperRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *keeperRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *keeperRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *keeperGRPCClient) GetCredentials(ctx context.Context, req *credentialspb.GetCredentialsRequest, opts ...gax.CallOption) (*credentialspb.Credentials, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetCredentials[0:len((*c.CallOptions).GetCredentials):len((*c.CallOptions).GetCredentials)], opts...)
	var resp *credentialspb.Credentials
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.keeperClient.GetCredentials(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *keeperGRPCClient) ListCredentials(ctx context.Context, req *credentialspb.ListCredentialsRequest, opts ...gax.CallOption) *CredentialsIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListCredentials[0:len((*c.CallOptions).ListCredentials):len((*c.CallOptions).ListCredentials)], opts...)
	it := &CredentialsIterator{}
	req = proto.Clone(req).(*credentialspb.ListCredentialsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*credentialspb.Credentials, string, error) {
		resp := &credentialspb.ListCredentialsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.keeperClient.ListCredentials(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetCredentials(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *keeperGRPCClient) CreateCredentials(ctx context.Context, req *credentialspb.CreateCredentialsRequest, opts ...gax.CallOption) (*credentialspb.Credentials, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "credentials.name", url.QueryEscape(req.GetCredentials().GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateCredentials[0:len((*c.CallOptions).CreateCredentials):len((*c.CallOptions).CreateCredentials)], opts...)
	var resp *credentialspb.Credentials
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.keeperClient.CreateCredentials(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *keeperGRPCClient) DeleteCredentials(ctx context.Context, req *credentialspb.DeleteCredentialsRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteCredentials[0:len((*c.CallOptions).DeleteCredentials):len((*c.CallOptions).DeleteCredentials)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.keeperClient.DeleteCredentials(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *keeperGRPCClient) ActAsCredentials(ctx context.Context, req *credentialspb.ActAsCredentialsRequest, opts ...gax.CallOption) (*credentialspb.ActAsCredentialsResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ActAsCredentials[0:len((*c.CallOptions).ActAsCredentials):len((*c.CallOptions).ActAsCredentials)], opts...)
	var resp *credentialspb.ActAsCredentialsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.keeperClient.ActAsCredentials(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *keeperRESTClient) GetCredentials(ctx context.Context, req *credentialspb.GetCredentialsRequest, opts ...gax.CallOption) (*credentialspb.Credentials, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v", req.GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	opts = append((*c.CallOptions).GetCredentials[0:len((*c.CallOptions).GetCredentials):len((*c.CallOptions).GetCredentials)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &credentialspb.Credentials{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *keeperRESTClient) ListCredentials(ctx context.Context, req *credentialspb.ListCredentialsRequest, opts ...gax.CallOption) *CredentialsIterator {
	it := &CredentialsIterator{}
	req = proto.Clone(req).(*credentialspb.ListCredentialsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*credentialspb.Credentials, string, error) {
		resp := &credentialspb.ListCredentialsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1alpha1/%v/credentials", req.GetParent())

		params := url.Values{}
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		headers := buildHeaders(ctx, c.xGoogMetadata, metadata.Pairs("Content-Type", "application/json"))
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := ioutil.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return maybeUnknownEnum(err)
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetCredentials(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
func (c *keeperRESTClient) CreateCredentials(ctx context.Context, req *credentialspb.CreateCredentialsRequest, opts ...gax.CallOption) (*credentialspb.Credentials, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v", req.GetCredentials().GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "credentials.name", url.QueryEscape(req.GetCredentials().GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	opts = append((*c.CallOptions).CreateCredentials[0:len((*c.CallOptions).CreateCredentials):len((*c.CallOptions).CreateCredentials)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &credentialspb.Credentials{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *keeperRESTClient) DeleteCredentials(ctx context.Context, req *credentialspb.DeleteCredentialsRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v", req.GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}
func (c *keeperRESTClient) ActAsCredentials(ctx context.Context, req *credentialspb.ActAsCredentialsRequest, opts ...gax.CallOption) (*credentialspb.ActAsCredentialsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v:actAs", req.GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	opts = append((*c.CallOptions).ActAsCredentials[0:len((*c.CallOptions).ActAsCredentials):len((*c.CallOptions).ActAsCredentials)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &credentialspb.ActAsCredentialsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CredentialsIterator manages a stream of *credentialspb.Credentials.
type CredentialsIterator struct {
	items    []*credentialspb.Credentials
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*credentialspb.Credentials, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *CredentialsIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *CredentialsIterator) Next() (*credentialspb.Credentials, error) {
	var item *credentialspb.Credentials
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *CredentialsIterator) bufLen() int {
	return len(it.items)
}

func (it *CredentialsIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
