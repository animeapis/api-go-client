// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package resourcemanager_test

import (
	"context"

	resourcemanager "github.com/animeapis/api-go-client/resourcemanager/v1alpha1"
	resourcemanagerpb "github.com/animeapis/go-genproto/resourcemanager/v1alpha1"
	"google.golang.org/api/iterator"
)

func ExampleNewClient() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleClient_GetOrganization() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.GetOrganizationRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetOrganization(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListOrganizations() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.ListOrganizationsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListOrganizations(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleClient_CreateOrganization() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.CreateOrganizationRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateOrganization(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateOrganization() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.UpdateOrganizationRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateOrganization(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteOrganization() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.DeleteOrganizationRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteOrganization(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetTeam() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.GetTeamRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetTeam(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListTeams() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.ListTeamsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListTeams(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleClient_CreateTeam() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.CreateTeamRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateTeam(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateTeam() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.UpdateTeamRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateTeam(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteTeam() {
	ctx := context.Background()
	c, err := resourcemanager.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &resourcemanagerpb.DeleteTeamRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteTeam(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}
