// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package resourcemanager

import (
	"context"
	"fmt"
	"math"
	"net/url"

	resourcemanagerpb "github.com/animeapis/go-genproto/resourcemanager/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	GetOrganization    []gax.CallOption
	ListOrganizations  []gax.CallOption
	CreateOrganization []gax.CallOption
	UpdateOrganization []gax.CallOption
	DeleteOrganization []gax.CallOption
	GetTeam            []gax.CallOption
	ListTeams          []gax.CallOption
	CreateTeam         []gax.CallOption
	UpdateTeam         []gax.CallOption
	DeleteTeam         []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("resourcemanager.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("resourcemanager.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://resourcemanager.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		GetOrganization:    []gax.CallOption{},
		ListOrganizations:  []gax.CallOption{},
		CreateOrganization: []gax.CallOption{},
		UpdateOrganization: []gax.CallOption{},
		DeleteOrganization: []gax.CallOption{},
		GetTeam:            []gax.CallOption{},
		ListTeams:          []gax.CallOption{},
		CreateTeam:         []gax.CallOption{},
		UpdateTeam:         []gax.CallOption{},
		DeleteTeam:         []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods available from Resource Manager API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetOrganization(context.Context, *resourcemanagerpb.GetOrganizationRequest, ...gax.CallOption) (*resourcemanagerpb.Organization, error)
	ListOrganizations(context.Context, *resourcemanagerpb.ListOrganizationsRequest, ...gax.CallOption) *OrganizationIterator
	CreateOrganization(context.Context, *resourcemanagerpb.CreateOrganizationRequest, ...gax.CallOption) (*resourcemanagerpb.Organization, error)
	UpdateOrganization(context.Context, *resourcemanagerpb.UpdateOrganizationRequest, ...gax.CallOption) (*resourcemanagerpb.Organization, error)
	DeleteOrganization(context.Context, *resourcemanagerpb.DeleteOrganizationRequest, ...gax.CallOption) error
	GetTeam(context.Context, *resourcemanagerpb.GetTeamRequest, ...gax.CallOption) (*resourcemanagerpb.Team, error)
	ListTeams(context.Context, *resourcemanagerpb.ListTeamsRequest, ...gax.CallOption) *TeamIterator
	CreateTeam(context.Context, *resourcemanagerpb.CreateTeamRequest, ...gax.CallOption) (*resourcemanagerpb.Team, error)
	UpdateTeam(context.Context, *resourcemanagerpb.UpdateTeamRequest, ...gax.CallOption) (*resourcemanagerpb.Team, error)
	DeleteTeam(context.Context, *resourcemanagerpb.DeleteTeamRequest, ...gax.CallOption) error
}

// Client is a client for interacting with Resource Manager API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *Client) GetOrganization(ctx context.Context, req *resourcemanagerpb.GetOrganizationRequest, opts ...gax.CallOption) (*resourcemanagerpb.Organization, error) {
	return c.internalClient.GetOrganization(ctx, req, opts...)
}

func (c *Client) ListOrganizations(ctx context.Context, req *resourcemanagerpb.ListOrganizationsRequest, opts ...gax.CallOption) *OrganizationIterator {
	return c.internalClient.ListOrganizations(ctx, req, opts...)
}

func (c *Client) CreateOrganization(ctx context.Context, req *resourcemanagerpb.CreateOrganizationRequest, opts ...gax.CallOption) (*resourcemanagerpb.Organization, error) {
	return c.internalClient.CreateOrganization(ctx, req, opts...)
}

func (c *Client) UpdateOrganization(ctx context.Context, req *resourcemanagerpb.UpdateOrganizationRequest, opts ...gax.CallOption) (*resourcemanagerpb.Organization, error) {
	return c.internalClient.UpdateOrganization(ctx, req, opts...)
}

func (c *Client) DeleteOrganization(ctx context.Context, req *resourcemanagerpb.DeleteOrganizationRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteOrganization(ctx, req, opts...)
}

func (c *Client) GetTeam(ctx context.Context, req *resourcemanagerpb.GetTeamRequest, opts ...gax.CallOption) (*resourcemanagerpb.Team, error) {
	return c.internalClient.GetTeam(ctx, req, opts...)
}

func (c *Client) ListTeams(ctx context.Context, req *resourcemanagerpb.ListTeamsRequest, opts ...gax.CallOption) *TeamIterator {
	return c.internalClient.ListTeams(ctx, req, opts...)
}

func (c *Client) CreateTeam(ctx context.Context, req *resourcemanagerpb.CreateTeamRequest, opts ...gax.CallOption) (*resourcemanagerpb.Team, error) {
	return c.internalClient.CreateTeam(ctx, req, opts...)
}

func (c *Client) UpdateTeam(ctx context.Context, req *resourcemanagerpb.UpdateTeamRequest, opts ...gax.CallOption) (*resourcemanagerpb.Team, error) {
	return c.internalClient.UpdateTeam(ctx, req, opts...)
}

func (c *Client) DeleteTeam(ctx context.Context, req *resourcemanagerpb.DeleteTeamRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteTeam(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Resource Manager API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client resourcemanagerpb.ResourceManagerClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new resource manager client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		client:           resourcemanagerpb.NewResourceManagerClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) GetOrganization(ctx context.Context, req *resourcemanagerpb.GetOrganizationRequest, opts ...gax.CallOption) (*resourcemanagerpb.Organization, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetOrganization[0:len((*c.CallOptions).GetOrganization):len((*c.CallOptions).GetOrganization)], opts...)
	var resp *resourcemanagerpb.Organization
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetOrganization(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListOrganizations(ctx context.Context, req *resourcemanagerpb.ListOrganizationsRequest, opts ...gax.CallOption) *OrganizationIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListOrganizations[0:len((*c.CallOptions).ListOrganizations):len((*c.CallOptions).ListOrganizations)], opts...)
	it := &OrganizationIterator{}
	req = proto.Clone(req).(*resourcemanagerpb.ListOrganizationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*resourcemanagerpb.Organization, string, error) {
		resp := &resourcemanagerpb.ListOrganizationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListOrganizations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOrganizations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) CreateOrganization(ctx context.Context, req *resourcemanagerpb.CreateOrganizationRequest, opts ...gax.CallOption) (*resourcemanagerpb.Organization, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateOrganization[0:len((*c.CallOptions).CreateOrganization):len((*c.CallOptions).CreateOrganization)], opts...)
	var resp *resourcemanagerpb.Organization
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateOrganization(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateOrganization(ctx context.Context, req *resourcemanagerpb.UpdateOrganizationRequest, opts ...gax.CallOption) (*resourcemanagerpb.Organization, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "organization.name", url.QueryEscape(req.GetOrganization().GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateOrganization[0:len((*c.CallOptions).UpdateOrganization):len((*c.CallOptions).UpdateOrganization)], opts...)
	var resp *resourcemanagerpb.Organization
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateOrganization(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteOrganization(ctx context.Context, req *resourcemanagerpb.DeleteOrganizationRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteOrganization[0:len((*c.CallOptions).DeleteOrganization):len((*c.CallOptions).DeleteOrganization)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteOrganization(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) GetTeam(ctx context.Context, req *resourcemanagerpb.GetTeamRequest, opts ...gax.CallOption) (*resourcemanagerpb.Team, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetTeam[0:len((*c.CallOptions).GetTeam):len((*c.CallOptions).GetTeam)], opts...)
	var resp *resourcemanagerpb.Team
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetTeam(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListTeams(ctx context.Context, req *resourcemanagerpb.ListTeamsRequest, opts ...gax.CallOption) *TeamIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListTeams[0:len((*c.CallOptions).ListTeams):len((*c.CallOptions).ListTeams)], opts...)
	it := &TeamIterator{}
	req = proto.Clone(req).(*resourcemanagerpb.ListTeamsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*resourcemanagerpb.Team, string, error) {
		resp := &resourcemanagerpb.ListTeamsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListTeams(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetTeams(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) CreateTeam(ctx context.Context, req *resourcemanagerpb.CreateTeamRequest, opts ...gax.CallOption) (*resourcemanagerpb.Team, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateTeam[0:len((*c.CallOptions).CreateTeam):len((*c.CallOptions).CreateTeam)], opts...)
	var resp *resourcemanagerpb.Team
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateTeam(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateTeam(ctx context.Context, req *resourcemanagerpb.UpdateTeamRequest, opts ...gax.CallOption) (*resourcemanagerpb.Team, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "team.name", url.QueryEscape(req.GetTeam().GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateTeam[0:len((*c.CallOptions).UpdateTeam):len((*c.CallOptions).UpdateTeam)], opts...)
	var resp *resourcemanagerpb.Team
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateTeam(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteTeam(ctx context.Context, req *resourcemanagerpb.DeleteTeamRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteTeam[0:len((*c.CallOptions).DeleteTeam):len((*c.CallOptions).DeleteTeam)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteTeam(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

// OrganizationIterator manages a stream of *resourcemanagerpb.Organization.
type OrganizationIterator struct {
	items    []*resourcemanagerpb.Organization
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*resourcemanagerpb.Organization, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *OrganizationIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *OrganizationIterator) Next() (*resourcemanagerpb.Organization, error) {
	var item *resourcemanagerpb.Organization
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *OrganizationIterator) bufLen() int {
	return len(it.items)
}

func (it *OrganizationIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// TeamIterator manages a stream of *resourcemanagerpb.Team.
type TeamIterator struct {
	items    []*resourcemanagerpb.Team
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*resourcemanagerpb.Team, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *TeamIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *TeamIterator) Next() (*resourcemanagerpb.Team, error) {
	var item *resourcemanagerpb.Team
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *TeamIterator) bufLen() int {
	return len(it.items)
}

func (it *TeamIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
