// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package release_test

import (
	"context"

	release "github.com/animeapis/api-go-client/release/v1alpha1"
	releasepb "github.com/animeapis/go-genproto/release/v1alpha1"
	"google.golang.org/api/iterator"
)

func ExampleNewPublisherClient() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExamplePublisherClient_GetRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.GetReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_ListReleases() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.ListReleasesRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListReleases(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExamplePublisherClient_CreateRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.CreateReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_UpdateRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.UpdateReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_DeleteRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.DeleteReleaseRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExamplePublisherClient_UndeleteRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.UndeleteReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UndeleteRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_PublishRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.PublishReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.PublishRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_UnpublishRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.UnpublishReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UnpublishRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_ScheduleRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.ScheduleReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ScheduleRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_CancelRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.CancelReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CancelRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePublisherClient_SuspendRelease() {
	ctx := context.Background()
	c, err := release.NewPublisherClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	req := &releasepb.SuspendReleaseRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.SuspendRelease(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
