// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package knowledge

import (
	"context"
	"fmt"
	"math"
	"net/url"

	knowledgepb "github.com/animeapis/go-genproto/knowledge/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	GetContribution        []gax.CallOption
	ListContributions      []gax.CallOption
	CreateContribution     []gax.CallOption
	GetContributionChanges []gax.CallOption
	ReviewContribution     []gax.CallOption
	ApproveContribution    []gax.CallOption
	RejectContribution     []gax.CallOption
	AllocateResourceName   []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("knowledge.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("knowledge.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://knowledge.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		GetContribution:        []gax.CallOption{},
		ListContributions:      []gax.CallOption{},
		CreateContribution:     []gax.CallOption{},
		GetContributionChanges: []gax.CallOption{},
		ReviewContribution:     []gax.CallOption{},
		ApproveContribution:    []gax.CallOption{},
		RejectContribution:     []gax.CallOption{},
		AllocateResourceName:   []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods availaible from Knowledge API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetContribution(context.Context, *knowledgepb.GetContributionRequest, ...gax.CallOption) (*knowledgepb.Contribution, error)
	ListContributions(context.Context, *knowledgepb.ListContributionsRequest, ...gax.CallOption) *ContributionIterator
	CreateContribution(context.Context, *knowledgepb.CreateContributionRequest, ...gax.CallOption) (*knowledgepb.Contribution, error)
	GetContributionChanges(context.Context, *knowledgepb.GetContributionChangesRequest, ...gax.CallOption) (*knowledgepb.ContributionChanges, error)
	ReviewContribution(context.Context, *knowledgepb.ReviewContributionRequest, ...gax.CallOption) (*knowledgepb.Contribution, error)
	ApproveContribution(context.Context, *knowledgepb.ApproveContributionRequest, ...gax.CallOption) (*knowledgepb.Contribution, error)
	RejectContribution(context.Context, *knowledgepb.RejectContributionRequest, ...gax.CallOption) (*knowledgepb.Contribution, error)
	AllocateResourceName(context.Context, *knowledgepb.AllocateResourceNameRequest, ...gax.CallOption) (*knowledgepb.AllocateResourceNameResponse, error)
}

// Client is a client for interacting with Knowledge API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *Client) GetContribution(ctx context.Context, req *knowledgepb.GetContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	return c.internalClient.GetContribution(ctx, req, opts...)
}

func (c *Client) ListContributions(ctx context.Context, req *knowledgepb.ListContributionsRequest, opts ...gax.CallOption) *ContributionIterator {
	return c.internalClient.ListContributions(ctx, req, opts...)
}

func (c *Client) CreateContribution(ctx context.Context, req *knowledgepb.CreateContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	return c.internalClient.CreateContribution(ctx, req, opts...)
}

func (c *Client) GetContributionChanges(ctx context.Context, req *knowledgepb.GetContributionChangesRequest, opts ...gax.CallOption) (*knowledgepb.ContributionChanges, error) {
	return c.internalClient.GetContributionChanges(ctx, req, opts...)
}

// ReviewContribution reviewContribution allows moderators or the owner to modify and correct the contribution
// while in the PENDING or DRAFT state
func (c *Client) ReviewContribution(ctx context.Context, req *knowledgepb.ReviewContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	return c.internalClient.ReviewContribution(ctx, req, opts...)
}

// ApproveContribution approveContribution approves the contribution and applies the changes
func (c *Client) ApproveContribution(ctx context.Context, req *knowledgepb.ApproveContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	return c.internalClient.ApproveContribution(ctx, req, opts...)
}

// RejectContribution rejectContribution rejects the contribution and DESTROYS all the changes
func (c *Client) RejectContribution(ctx context.Context, req *knowledgepb.RejectContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	return c.internalClient.RejectContribution(ctx, req, opts...)
}

// AllocateResourceName allocateResourceName reserves a new resource name for entities which are not already part of
// Animeshonâ€™s Encyclopedia
func (c *Client) AllocateResourceName(ctx context.Context, req *knowledgepb.AllocateResourceNameRequest, opts ...gax.CallOption) (*knowledgepb.AllocateResourceNameResponse, error) {
	return c.internalClient.AllocateResourceName(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Knowledge API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client knowledgepb.KnowledgeClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new knowledge client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		client:           knowledgepb.NewKnowledgeClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) GetContribution(ctx context.Context, req *knowledgepb.GetContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetContribution[0:len((*c.CallOptions).GetContribution):len((*c.CallOptions).GetContribution)], opts...)
	var resp *knowledgepb.Contribution
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetContribution(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListContributions(ctx context.Context, req *knowledgepb.ListContributionsRequest, opts ...gax.CallOption) *ContributionIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListContributions[0:len((*c.CallOptions).ListContributions):len((*c.CallOptions).ListContributions)], opts...)
	it := &ContributionIterator{}
	req = proto.Clone(req).(*knowledgepb.ListContributionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*knowledgepb.Contribution, string, error) {
		var resp *knowledgepb.ListContributionsResponse
		req.PageToken = pageToken
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListContributions(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetContributions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}
	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()
	return it
}

func (c *gRPCClient) CreateContribution(ctx context.Context, req *knowledgepb.CreateContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateContribution[0:len((*c.CallOptions).CreateContribution):len((*c.CallOptions).CreateContribution)], opts...)
	var resp *knowledgepb.Contribution
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateContribution(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetContributionChanges(ctx context.Context, req *knowledgepb.GetContributionChangesRequest, opts ...gax.CallOption) (*knowledgepb.ContributionChanges, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetContributionChanges[0:len((*c.CallOptions).GetContributionChanges):len((*c.CallOptions).GetContributionChanges)], opts...)
	var resp *knowledgepb.ContributionChanges
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetContributionChanges(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ReviewContribution(ctx context.Context, req *knowledgepb.ReviewContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ReviewContribution[0:len((*c.CallOptions).ReviewContribution):len((*c.CallOptions).ReviewContribution)], opts...)
	var resp *knowledgepb.Contribution
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ReviewContribution(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ApproveContribution(ctx context.Context, req *knowledgepb.ApproveContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ApproveContribution[0:len((*c.CallOptions).ApproveContribution):len((*c.CallOptions).ApproveContribution)], opts...)
	var resp *knowledgepb.Contribution
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ApproveContribution(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) RejectContribution(ctx context.Context, req *knowledgepb.RejectContributionRequest, opts ...gax.CallOption) (*knowledgepb.Contribution, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).RejectContribution[0:len((*c.CallOptions).RejectContribution):len((*c.CallOptions).RejectContribution)], opts...)
	var resp *knowledgepb.Contribution
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.RejectContribution(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) AllocateResourceName(ctx context.Context, req *knowledgepb.AllocateResourceNameRequest, opts ...gax.CallOption) (*knowledgepb.AllocateResourceNameResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).AllocateResourceName[0:len((*c.CallOptions).AllocateResourceName):len((*c.CallOptions).AllocateResourceName)], opts...)
	var resp *knowledgepb.AllocateResourceNameResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.AllocateResourceName(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ContributionIterator manages a stream of *knowledgepb.Contribution.
type ContributionIterator struct {
	items    []*knowledgepb.Contribution
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*knowledgepb.Contribution, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *ContributionIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *ContributionIterator) Next() (*knowledgepb.Contribution, error) {
	var item *knowledgepb.Contribution
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *ContributionIterator) bufLen() int {
	return len(it.items)
}

func (it *ContributionIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
