// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package tracker

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	trackerpb "github.com/animeapis/go-genproto/tracker/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	GetTracker     []gax.CallOption
	ListTrackers   []gax.CallOption
	CreateTracker  []gax.CallOption
	UpdateTracker  []gax.CallOption
	DeleteTracker  []gax.CallOption
	ImportTrackers []gax.CallOption
	ExportTrackers []gax.CallOption
	CreateActivity []gax.CallOption
	DeleteActivity []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("tracker.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("tracker.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://tracker.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		GetTracker:     []gax.CallOption{},
		ListTrackers:   []gax.CallOption{},
		CreateTracker:  []gax.CallOption{},
		UpdateTracker:  []gax.CallOption{},
		DeleteTracker:  []gax.CallOption{},
		ImportTrackers: []gax.CallOption{},
		ExportTrackers: []gax.CallOption{},
		CreateActivity: []gax.CallOption{},
		DeleteActivity: []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods availaible from Tracker API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetTracker(context.Context, *trackerpb.GetTrackerRequest, ...gax.CallOption) (*trackerpb.Tracker, error)
	ListTrackers(context.Context, *trackerpb.ListTrackersRequest, ...gax.CallOption) *TrackerIterator
	CreateTracker(context.Context, *trackerpb.CreateTrackerRequest, ...gax.CallOption) (*trackerpb.Tracker, error)
	UpdateTracker(context.Context, *trackerpb.UpdateTrackerRequest, ...gax.CallOption) (*trackerpb.Tracker, error)
	DeleteTracker(context.Context, *trackerpb.DeleteTrackerRequest, ...gax.CallOption) error
	ImportTrackers(context.Context, *trackerpb.ImportTrackersRequest, ...gax.CallOption) (*ImportTrackersOperation, error)
	ImportTrackersOperation(name string) *ImportTrackersOperation
	ExportTrackers(context.Context, *trackerpb.ExportTrackersRequest, ...gax.CallOption) (*ExportTrackersOperation, error)
	ExportTrackersOperation(name string) *ExportTrackersOperation
	CreateActivity(context.Context, *trackerpb.CreateActivityRequest, ...gax.CallOption) (*trackerpb.Activity, error)
	DeleteActivity(context.Context, *trackerpb.DeleteActivityRequest, ...gax.CallOption) error
}

// Client is a client for interacting with Tracker API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetTracker get a tracker by its unique identifier.
//
// To fetch a tracker by the resource, use ListTrackers instead with an
// appropriate filter. Example: filter = "resource:animes/1245678".
func (c *Client) GetTracker(ctx context.Context, req *trackerpb.GetTrackerRequest, opts ...gax.CallOption) (*trackerpb.Tracker, error) {
	return c.internalClient.GetTracker(ctx, req, opts...)
}

// ListTrackers tODO: add documentation about supported filters.
func (c *Client) ListTrackers(ctx context.Context, req *trackerpb.ListTrackersRequest, opts ...gax.CallOption) *TrackerIterator {
	return c.internalClient.ListTrackers(ctx, req, opts...)
}

func (c *Client) CreateTracker(ctx context.Context, req *trackerpb.CreateTrackerRequest, opts ...gax.CallOption) (*trackerpb.Tracker, error) {
	return c.internalClient.CreateTracker(ctx, req, opts...)
}

func (c *Client) UpdateTracker(ctx context.Context, req *trackerpb.UpdateTrackerRequest, opts ...gax.CallOption) (*trackerpb.Tracker, error) {
	return c.internalClient.UpdateTracker(ctx, req, opts...)
}

func (c *Client) DeleteTracker(ctx context.Context, req *trackerpb.DeleteTrackerRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteTracker(ctx, req, opts...)
}

func (c *Client) ImportTrackers(ctx context.Context, req *trackerpb.ImportTrackersRequest, opts ...gax.CallOption) (*ImportTrackersOperation, error) {
	return c.internalClient.ImportTrackers(ctx, req, opts...)
}

// ImportTrackersOperation returns a new ImportTrackersOperation from a given name.
// The name must be that of a previously created ImportTrackersOperation, possibly from a different process.
func (c *Client) ImportTrackersOperation(name string) *ImportTrackersOperation {
	return c.internalClient.ImportTrackersOperation(name)
}

func (c *Client) ExportTrackers(ctx context.Context, req *trackerpb.ExportTrackersRequest, opts ...gax.CallOption) (*ExportTrackersOperation, error) {
	return c.internalClient.ExportTrackers(ctx, req, opts...)
}

// ExportTrackersOperation returns a new ExportTrackersOperation from a given name.
// The name must be that of a previously created ExportTrackersOperation, possibly from a different process.
func (c *Client) ExportTrackersOperation(name string) *ExportTrackersOperation {
	return c.internalClient.ExportTrackersOperation(name)
}

func (c *Client) CreateActivity(ctx context.Context, req *trackerpb.CreateActivityRequest, opts ...gax.CallOption) (*trackerpb.Activity, error) {
	return c.internalClient.CreateActivity(ctx, req, opts...)
}

func (c *Client) DeleteActivity(ctx context.Context, req *trackerpb.DeleteActivityRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteActivity(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Tracker API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client trackerpb.TrackerServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new tracker service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		client:           trackerpb.NewTrackerServiceClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) GetTracker(ctx context.Context, req *trackerpb.GetTrackerRequest, opts ...gax.CallOption) (*trackerpb.Tracker, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetTracker[0:len((*c.CallOptions).GetTracker):len((*c.CallOptions).GetTracker)], opts...)
	var resp *trackerpb.Tracker
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetTracker(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListTrackers(ctx context.Context, req *trackerpb.ListTrackersRequest, opts ...gax.CallOption) *TrackerIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListTrackers[0:len((*c.CallOptions).ListTrackers):len((*c.CallOptions).ListTrackers)], opts...)
	it := &TrackerIterator{}
	req = proto.Clone(req).(*trackerpb.ListTrackersRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*trackerpb.Tracker, string, error) {
		resp := &trackerpb.ListTrackersResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListTrackers(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetTrackers(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) CreateTracker(ctx context.Context, req *trackerpb.CreateTrackerRequest, opts ...gax.CallOption) (*trackerpb.Tracker, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateTracker[0:len((*c.CallOptions).CreateTracker):len((*c.CallOptions).CreateTracker)], opts...)
	var resp *trackerpb.Tracker
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateTracker(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateTracker(ctx context.Context, req *trackerpb.UpdateTrackerRequest, opts ...gax.CallOption) (*trackerpb.Tracker, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "tracker.name", url.QueryEscape(req.GetTracker().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateTracker[0:len((*c.CallOptions).UpdateTracker):len((*c.CallOptions).UpdateTracker)], opts...)
	var resp *trackerpb.Tracker
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateTracker(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteTracker(ctx context.Context, req *trackerpb.DeleteTrackerRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteTracker[0:len((*c.CallOptions).DeleteTracker):len((*c.CallOptions).DeleteTracker)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteTracker(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) ImportTrackers(ctx context.Context, req *trackerpb.ImportTrackersRequest, opts ...gax.CallOption) (*ImportTrackersOperation, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ImportTrackers[0:len((*c.CallOptions).ImportTrackers):len((*c.CallOptions).ImportTrackers)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ImportTrackers(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ImportTrackersOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) ExportTrackers(ctx context.Context, req *trackerpb.ExportTrackersRequest, opts ...gax.CallOption) (*ExportTrackersOperation, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ExportTrackers[0:len((*c.CallOptions).ExportTrackers):len((*c.CallOptions).ExportTrackers)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ExportTrackers(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportTrackersOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) CreateActivity(ctx context.Context, req *trackerpb.CreateActivityRequest, opts ...gax.CallOption) (*trackerpb.Activity, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateActivity[0:len((*c.CallOptions).CreateActivity):len((*c.CallOptions).CreateActivity)], opts...)
	var resp *trackerpb.Activity
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateActivity(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteActivity(ctx context.Context, req *trackerpb.DeleteActivityRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteActivity[0:len((*c.CallOptions).DeleteActivity):len((*c.CallOptions).DeleteActivity)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteActivity(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

// ExportTrackersOperation manages a long-running operation from ExportTrackers.
type ExportTrackersOperation struct {
	lro *longrunning.Operation
}

// ExportTrackersOperation returns a new ExportTrackersOperation from a given name.
// The name must be that of a previously created ExportTrackersOperation, possibly from a different process.
func (c *gRPCClient) ExportTrackersOperation(name string) *ExportTrackersOperation {
	return &ExportTrackersOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ExportTrackersOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*trackerpb.ExportTrackersResponse, error) {
	var resp trackerpb.ExportTrackersResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ExportTrackersOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*trackerpb.ExportTrackersResponse, error) {
	var resp trackerpb.ExportTrackersResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ExportTrackersOperation) Metadata() (*trackerpb.OperationMetadata, error) {
	var meta trackerpb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ExportTrackersOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ExportTrackersOperation) Name() string {
	return op.lro.Name()
}

// ImportTrackersOperation manages a long-running operation from ImportTrackers.
type ImportTrackersOperation struct {
	lro *longrunning.Operation
}

// ImportTrackersOperation returns a new ImportTrackersOperation from a given name.
// The name must be that of a previously created ImportTrackersOperation, possibly from a different process.
func (c *gRPCClient) ImportTrackersOperation(name string) *ImportTrackersOperation {
	return &ImportTrackersOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ImportTrackersOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*trackerpb.ImportTrackersResponse, error) {
	var resp trackerpb.ImportTrackersResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ImportTrackersOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*trackerpb.ImportTrackersResponse, error) {
	var resp trackerpb.ImportTrackersResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ImportTrackersOperation) Metadata() (*trackerpb.OperationMetadata, error) {
	var meta trackerpb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ImportTrackersOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ImportTrackersOperation) Name() string {
	return op.lro.Name()
}

// TrackerIterator manages a stream of *trackerpb.Tracker.
type TrackerIterator struct {
	items    []*trackerpb.Tracker
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*trackerpb.Tracker, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *TrackerIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *TrackerIterator) Next() (*trackerpb.Tracker, error) {
	var item *trackerpb.Tracker
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *TrackerIterator) bufLen() int {
	return len(it.items)
}

func (it *TrackerIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
