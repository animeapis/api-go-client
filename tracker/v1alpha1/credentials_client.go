// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package tracker

import (
	"context"
	"fmt"
	"math"
	"net/url"

	trackerpb "github.com/animeapis/go-genproto/tracker/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newCredentialsClientHook clientHook

// CredentialsCallOptions contains the retry settings for each method of CredentialsClient.
type CredentialsCallOptions struct {
	GetOAuthInfo []gax.CallOption
	SetAuth      []gax.CallOption
}

func defaultCredentialsGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("tracker.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("tracker.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://tracker.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCredentialsCallOptions() *CredentialsCallOptions {
	return &CredentialsCallOptions{
		GetOAuthInfo: []gax.CallOption{},
		SetAuth:      []gax.CallOption{},
	}
}

// internalCredentialsClient is an interface that defines the methods availaible from Tracker API.
type internalCredentialsClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetOAuthInfo(context.Context, *trackerpb.OAuthInfoRequest, ...gax.CallOption) (*trackerpb.OAuthInfoResponse, error)
	SetAuth(context.Context, *trackerpb.SetAuthRequest, ...gax.CallOption) error
}

// CredentialsClient is a client for interacting with Tracker API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type CredentialsClient struct {
	// The internal transport-dependent client.
	internalClient internalCredentialsClient

	// The call options for this service.
	CallOptions *CredentialsCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *CredentialsClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *CredentialsClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *CredentialsClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetOAuthInfo only used for OAuth as we need to set up the flow
func (c *CredentialsClient) GetOAuthInfo(ctx context.Context, req *trackerpb.OAuthInfoRequest, opts ...gax.CallOption) (*trackerpb.OAuthInfoResponse, error) {
	return c.internalClient.GetOAuthInfo(ctx, req, opts...)
}

func (c *CredentialsClient) SetAuth(ctx context.Context, req *trackerpb.SetAuthRequest, opts ...gax.CallOption) error {
	return c.internalClient.SetAuth(ctx, req, opts...)
}

// credentialsGRPCClient is a client for interacting with Tracker API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type credentialsGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing CredentialsClient
	CallOptions **CredentialsCallOptions

	// The gRPC API client.
	credentialsClient trackerpb.CredentialsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewCredentialsClient creates a new credentials client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewCredentialsClient(ctx context.Context, opts ...option.ClientOption) (*CredentialsClient, error) {
	clientOpts := defaultCredentialsGRPCClientOptions()
	if newCredentialsClientHook != nil {
		hookOpts, err := newCredentialsClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := CredentialsClient{CallOptions: defaultCredentialsCallOptions()}

	c := &credentialsGRPCClient{
		connPool:          connPool,
		disableDeadlines:  disableDeadlines,
		credentialsClient: trackerpb.NewCredentialsClient(connPool),
		CallOptions:       &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *credentialsGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *credentialsGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *credentialsGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *credentialsGRPCClient) GetOAuthInfo(ctx context.Context, req *trackerpb.OAuthInfoRequest, opts ...gax.CallOption) (*trackerpb.OAuthInfoResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetOAuthInfo[0:len((*c.CallOptions).GetOAuthInfo):len((*c.CallOptions).GetOAuthInfo)], opts...)
	var resp *trackerpb.OAuthInfoResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.credentialsClient.GetOAuthInfo(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *credentialsGRPCClient) SetAuth(ctx context.Context, req *trackerpb.SetAuthRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).SetAuth[0:len((*c.CallOptions).SetAuth):len((*c.CallOptions).SetAuth)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.credentialsClient.SetAuth(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}
