// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package image

import (
	"context"
	"fmt"
	"math"
	"net/url"

	imagepb "github.com/animeapis/go-genproto/image/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httpbodypb "google.golang.org/genproto/googleapis/api/httpbody"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var newImageRouterClientHook clientHook

// ImageRouterCallOptions contains the retry settings for each method of ImageRouterClient.
type ImageRouterCallOptions struct {
	GetImageRoute []gax.CallOption
	RouteImage    []gax.CallOption
}

func defaultImageRouterGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("image.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("image.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://image.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultImageRouterCallOptions() *ImageRouterCallOptions {
	return &ImageRouterCallOptions{
		GetImageRoute: []gax.CallOption{},
		RouteImage:    []gax.CallOption{},
	}
}

// internalImageRouterClient is an interface that defines the methods availaible from Image API.
type internalImageRouterClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetImageRoute(context.Context, *imagepb.GetImageRouteRequest, ...gax.CallOption) (*imagepb.GetImageRouteResponse, error)
	RouteImage(context.Context, *imagepb.RouteImageRequest, ...gax.CallOption) (*httpbodypb.HttpBody, error)
}

// ImageRouterClient is a client for interacting with Image API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// The image router is used to generate public links that can be routed through
// the Animeshon CDN (Content Delivery Network) to guarantee high performance
// and availability worldwide.
type ImageRouterClient struct {
	// The internal transport-dependent client.
	internalClient internalImageRouterClient

	// The call options for this service.
	CallOptions *ImageRouterCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *ImageRouterClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *ImageRouterClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *ImageRouterClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetImageRoute gets the image public link address that is used to fetch images via CDN.
func (c *ImageRouterClient) GetImageRoute(ctx context.Context, req *imagepb.GetImageRouteRequest, opts ...gax.CallOption) (*imagepb.GetImageRouteResponse, error) {
	return c.internalClient.GetImageRoute(ctx, req, opts...)
}

// RouteImage routes a raw request received by a CDN host to its target image.
func (c *ImageRouterClient) RouteImage(ctx context.Context, req *imagepb.RouteImageRequest, opts ...gax.CallOption) (*httpbodypb.HttpBody, error) {
	return c.internalClient.RouteImage(ctx, req, opts...)
}

// imageRouterGRPCClient is a client for interacting with Image API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type imageRouterGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing ImageRouterClient
	CallOptions **ImageRouterCallOptions

	// The gRPC API client.
	imageRouterClient imagepb.ImageRouterClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewImageRouterClient creates a new image router client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// The image router is used to generate public links that can be routed through
// the Animeshon CDN (Content Delivery Network) to guarantee high performance
// and availability worldwide.
func NewImageRouterClient(ctx context.Context, opts ...option.ClientOption) (*ImageRouterClient, error) {
	clientOpts := defaultImageRouterGRPCClientOptions()
	if newImageRouterClientHook != nil {
		hookOpts, err := newImageRouterClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := ImageRouterClient{CallOptions: defaultImageRouterCallOptions()}

	c := &imageRouterGRPCClient{
		connPool:          connPool,
		disableDeadlines:  disableDeadlines,
		imageRouterClient: imagepb.NewImageRouterClient(connPool),
		CallOptions:       &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *imageRouterGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *imageRouterGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *imageRouterGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *imageRouterGRPCClient) GetImageRoute(ctx context.Context, req *imagepb.GetImageRouteRequest, opts ...gax.CallOption) (*imagepb.GetImageRouteResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetImageRoute[0:len((*c.CallOptions).GetImageRoute):len((*c.CallOptions).GetImageRoute)], opts...)
	var resp *imagepb.GetImageRouteResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.imageRouterClient.GetImageRoute(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *imageRouterGRPCClient) RouteImage(ctx context.Context, req *imagepb.RouteImageRequest, opts ...gax.CallOption) (*httpbodypb.HttpBody, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "get", url.QueryEscape(req.GetGet())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).RouteImage[0:len((*c.CallOptions).RouteImage):len((*c.CallOptions).RouteImage)], opts...)
	var resp *httpbodypb.HttpBody
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.imageRouterClient.RouteImage(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
