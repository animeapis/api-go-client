// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package multimedia

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	multimediapb "github.com/animeapis/go-genproto/multimedia/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newChapterClientHook clientHook

// ChapterCallOptions contains the retry settings for each method of ChapterClient.
type ChapterCallOptions struct {
	GetChapter          []gax.CallOption
	ListChapters        []gax.CallOption
	CreateChapter       []gax.CallOption
	BatchCreateChapters []gax.CallOption
	UpdateChapter       []gax.CallOption
	DeleteChapter       []gax.CallOption
	ReconcileChapters   []gax.CallOption
}

func defaultChapterGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://multimedia.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultChapterCallOptions() *ChapterCallOptions {
	return &ChapterCallOptions{
		GetChapter:          []gax.CallOption{},
		ListChapters:        []gax.CallOption{},
		CreateChapter:       []gax.CallOption{},
		BatchCreateChapters: []gax.CallOption{},
		UpdateChapter:       []gax.CallOption{},
		DeleteChapter:       []gax.CallOption{},
		ReconcileChapters:   []gax.CallOption{},
	}
}

// internalChapterClient is an interface that defines the methods availaible from Multimedia API.
type internalChapterClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetChapter(context.Context, *multimediapb.GetChapterRequest, ...gax.CallOption) (*multimediapb.Chapter, error)
	ListChapters(context.Context, *multimediapb.ListChaptersRequest, ...gax.CallOption) *ChapterIterator
	CreateChapter(context.Context, *multimediapb.CreateChapterRequest, ...gax.CallOption) (*multimediapb.Chapter, error)
	BatchCreateChapters(context.Context, *multimediapb.BatchCreateChaptersRequest, ...gax.CallOption) (*multimediapb.BatchCreateChaptersResponse, error)
	UpdateChapter(context.Context, *multimediapb.UpdateChapterRequest, ...gax.CallOption) (*multimediapb.Chapter, error)
	DeleteChapter(context.Context, *multimediapb.DeleteChapterRequest, ...gax.CallOption) error
	ReconcileChapters(context.Context, *multimediapb.ReconcileChaptersRequest, ...gax.CallOption) (*ReconcileChaptersOperation, error)
	ReconcileChaptersOperation(name string) *ReconcileChaptersOperation
}

// ChapterClient is a client for interacting with Multimedia API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type ChapterClient struct {
	// The internal transport-dependent client.
	internalClient internalChapterClient

	// The call options for this service.
	CallOptions *ChapterCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *ChapterClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *ChapterClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *ChapterClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *ChapterClient) GetChapter(ctx context.Context, req *multimediapb.GetChapterRequest, opts ...gax.CallOption) (*multimediapb.Chapter, error) {
	return c.internalClient.GetChapter(ctx, req, opts...)
}

func (c *ChapterClient) ListChapters(ctx context.Context, req *multimediapb.ListChaptersRequest, opts ...gax.CallOption) *ChapterIterator {
	return c.internalClient.ListChapters(ctx, req, opts...)
}

func (c *ChapterClient) CreateChapter(ctx context.Context, req *multimediapb.CreateChapterRequest, opts ...gax.CallOption) (*multimediapb.Chapter, error) {
	return c.internalClient.CreateChapter(ctx, req, opts...)
}

func (c *ChapterClient) BatchCreateChapters(ctx context.Context, req *multimediapb.BatchCreateChaptersRequest, opts ...gax.CallOption) (*multimediapb.BatchCreateChaptersResponse, error) {
	return c.internalClient.BatchCreateChapters(ctx, req, opts...)
}

func (c *ChapterClient) UpdateChapter(ctx context.Context, req *multimediapb.UpdateChapterRequest, opts ...gax.CallOption) (*multimediapb.Chapter, error) {
	return c.internalClient.UpdateChapter(ctx, req, opts...)
}

func (c *ChapterClient) DeleteChapter(ctx context.Context, req *multimediapb.DeleteChapterRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteChapter(ctx, req, opts...)
}

// ReconcileChapters reconcile chapters with the search and knowledge base.
func (c *ChapterClient) ReconcileChapters(ctx context.Context, req *multimediapb.ReconcileChaptersRequest, opts ...gax.CallOption) (*ReconcileChaptersOperation, error) {
	return c.internalClient.ReconcileChapters(ctx, req, opts...)
}

// ReconcileChaptersOperation returns a new ReconcileChaptersOperation from a given name.
// The name must be that of a previously created ReconcileChaptersOperation, possibly from a different process.
func (c *ChapterClient) ReconcileChaptersOperation(name string) *ReconcileChaptersOperation {
	return c.internalClient.ReconcileChaptersOperation(name)
}

// chapterGRPCClient is a client for interacting with Multimedia API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type chapterGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing ChapterClient
	CallOptions **ChapterCallOptions

	// The gRPC API client.
	chapterClient multimediapb.ChapterServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewChapterClient creates a new chapter service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewChapterClient(ctx context.Context, opts ...option.ClientOption) (*ChapterClient, error) {
	clientOpts := defaultChapterGRPCClientOptions()
	if newChapterClientHook != nil {
		hookOpts, err := newChapterClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := ChapterClient{CallOptions: defaultChapterCallOptions()}

	c := &chapterGRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		chapterClient:    multimediapb.NewChapterServiceClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *chapterGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *chapterGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *chapterGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *chapterGRPCClient) GetChapter(ctx context.Context, req *multimediapb.GetChapterRequest, opts ...gax.CallOption) (*multimediapb.Chapter, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetChapter[0:len((*c.CallOptions).GetChapter):len((*c.CallOptions).GetChapter)], opts...)
	var resp *multimediapb.Chapter
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.chapterClient.GetChapter(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *chapterGRPCClient) ListChapters(ctx context.Context, req *multimediapb.ListChaptersRequest, opts ...gax.CallOption) *ChapterIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListChapters[0:len((*c.CallOptions).ListChapters):len((*c.CallOptions).ListChapters)], opts...)
	it := &ChapterIterator{}
	req = proto.Clone(req).(*multimediapb.ListChaptersRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*multimediapb.Chapter, string, error) {
		resp := &multimediapb.ListChaptersResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.chapterClient.ListChapters(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetChapters(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *chapterGRPCClient) CreateChapter(ctx context.Context, req *multimediapb.CreateChapterRequest, opts ...gax.CallOption) (*multimediapb.Chapter, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateChapter[0:len((*c.CallOptions).CreateChapter):len((*c.CallOptions).CreateChapter)], opts...)
	var resp *multimediapb.Chapter
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.chapterClient.CreateChapter(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *chapterGRPCClient) BatchCreateChapters(ctx context.Context, req *multimediapb.BatchCreateChaptersRequest, opts ...gax.CallOption) (*multimediapb.BatchCreateChaptersResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).BatchCreateChapters[0:len((*c.CallOptions).BatchCreateChapters):len((*c.CallOptions).BatchCreateChapters)], opts...)
	var resp *multimediapb.BatchCreateChaptersResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.chapterClient.BatchCreateChapters(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *chapterGRPCClient) UpdateChapter(ctx context.Context, req *multimediapb.UpdateChapterRequest, opts ...gax.CallOption) (*multimediapb.Chapter, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "chapter.name", url.QueryEscape(req.GetChapter().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateChapter[0:len((*c.CallOptions).UpdateChapter):len((*c.CallOptions).UpdateChapter)], opts...)
	var resp *multimediapb.Chapter
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.chapterClient.UpdateChapter(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *chapterGRPCClient) DeleteChapter(ctx context.Context, req *multimediapb.DeleteChapterRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteChapter[0:len((*c.CallOptions).DeleteChapter):len((*c.CallOptions).DeleteChapter)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.chapterClient.DeleteChapter(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *chapterGRPCClient) ReconcileChapters(ctx context.Context, req *multimediapb.ReconcileChaptersRequest, opts ...gax.CallOption) (*ReconcileChaptersOperation, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ReconcileChapters[0:len((*c.CallOptions).ReconcileChapters):len((*c.CallOptions).ReconcileChapters)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.chapterClient.ReconcileChapters(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ReconcileChaptersOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

// ReconcileChaptersOperation manages a long-running operation from ReconcileChapters.
type ReconcileChaptersOperation struct {
	lro *longrunning.Operation
}

// ReconcileChaptersOperation returns a new ReconcileChaptersOperation from a given name.
// The name must be that of a previously created ReconcileChaptersOperation, possibly from a different process.
func (c *chapterGRPCClient) ReconcileChaptersOperation(name string) *ReconcileChaptersOperation {
	return &ReconcileChaptersOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ReconcileChaptersOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*multimediapb.ReconcileChaptersResponse, error) {
	var resp multimediapb.ReconcileChaptersResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ReconcileChaptersOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*multimediapb.ReconcileChaptersResponse, error) {
	var resp multimediapb.ReconcileChaptersResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ReconcileChaptersOperation) Metadata() (*multimediapb.OperationMetadata, error) {
	var meta multimediapb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ReconcileChaptersOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ReconcileChaptersOperation) Name() string {
	return op.lro.Name()
}

// ChapterIterator manages a stream of *multimediapb.Chapter.
type ChapterIterator struct {
	items    []*multimediapb.Chapter
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*multimediapb.Chapter, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *ChapterIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *ChapterIterator) Next() (*multimediapb.Chapter, error) {
	var item *multimediapb.Chapter
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *ChapterIterator) bufLen() int {
	return len(it.items)
}

func (it *ChapterIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
