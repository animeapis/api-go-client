// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package multimedia

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"math"
	"net/http"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	multimediapb "github.com/animeapis/go-genproto/multimedia/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newEpisodeClientHook clientHook

// EpisodeCallOptions contains the retry settings for each method of EpisodeClient.
type EpisodeCallOptions struct {
	GetEpisode          []gax.CallOption
	ListEpisodes        []gax.CallOption
	CreateEpisode       []gax.CallOption
	BatchCreateEpisodes []gax.CallOption
	UpdateEpisode       []gax.CallOption
	DeleteEpisode       []gax.CallOption
	ReconcileEpisodes   []gax.CallOption
}

func defaultEpisodeGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://multimedia.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultEpisodeCallOptions() *EpisodeCallOptions {
	return &EpisodeCallOptions{
		GetEpisode:          []gax.CallOption{},
		ListEpisodes:        []gax.CallOption{},
		CreateEpisode:       []gax.CallOption{},
		BatchCreateEpisodes: []gax.CallOption{},
		UpdateEpisode:       []gax.CallOption{},
		DeleteEpisode:       []gax.CallOption{},
		ReconcileEpisodes:   []gax.CallOption{},
	}
}

func defaultEpisodeRESTCallOptions() *EpisodeCallOptions {
	return &EpisodeCallOptions{
		GetEpisode:          []gax.CallOption{},
		ListEpisodes:        []gax.CallOption{},
		CreateEpisode:       []gax.CallOption{},
		BatchCreateEpisodes: []gax.CallOption{},
		UpdateEpisode:       []gax.CallOption{},
		DeleteEpisode:       []gax.CallOption{},
		ReconcileEpisodes:   []gax.CallOption{},
	}
}

// internalEpisodeClient is an interface that defines the methods available from Multimedia API.
type internalEpisodeClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetEpisode(context.Context, *multimediapb.GetEpisodeRequest, ...gax.CallOption) (*multimediapb.Episode, error)
	ListEpisodes(context.Context, *multimediapb.ListEpisodesRequest, ...gax.CallOption) *EpisodeIterator
	CreateEpisode(context.Context, *multimediapb.CreateEpisodeRequest, ...gax.CallOption) (*multimediapb.Episode, error)
	BatchCreateEpisodes(context.Context, *multimediapb.BatchCreateEpisodesRequest, ...gax.CallOption) (*BatchCreateEpisodesOperation, error)
	BatchCreateEpisodesOperation(name string) *BatchCreateEpisodesOperation
	UpdateEpisode(context.Context, *multimediapb.UpdateEpisodeRequest, ...gax.CallOption) (*multimediapb.Episode, error)
	DeleteEpisode(context.Context, *multimediapb.DeleteEpisodeRequest, ...gax.CallOption) error
	ReconcileEpisodes(context.Context, *multimediapb.ReconcileEpisodesRequest, ...gax.CallOption) (*ReconcileEpisodesOperation, error)
	ReconcileEpisodesOperation(name string) *ReconcileEpisodesOperation
}

// EpisodeClient is a client for interacting with Multimedia API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type EpisodeClient struct {
	// The internal transport-dependent client.
	internalClient internalEpisodeClient

	// The call options for this service.
	CallOptions *EpisodeCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *EpisodeClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *EpisodeClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *EpisodeClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *EpisodeClient) GetEpisode(ctx context.Context, req *multimediapb.GetEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	return c.internalClient.GetEpisode(ctx, req, opts...)
}

func (c *EpisodeClient) ListEpisodes(ctx context.Context, req *multimediapb.ListEpisodesRequest, opts ...gax.CallOption) *EpisodeIterator {
	return c.internalClient.ListEpisodes(ctx, req, opts...)
}

func (c *EpisodeClient) CreateEpisode(ctx context.Context, req *multimediapb.CreateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	return c.internalClient.CreateEpisode(ctx, req, opts...)
}

func (c *EpisodeClient) BatchCreateEpisodes(ctx context.Context, req *multimediapb.BatchCreateEpisodesRequest, opts ...gax.CallOption) (*BatchCreateEpisodesOperation, error) {
	return c.internalClient.BatchCreateEpisodes(ctx, req, opts...)
}

// BatchCreateEpisodesOperation returns a new BatchCreateEpisodesOperation from a given name.
// The name must be that of a previously created BatchCreateEpisodesOperation, possibly from a different process.
func (c *EpisodeClient) BatchCreateEpisodesOperation(name string) *BatchCreateEpisodesOperation {
	return c.internalClient.BatchCreateEpisodesOperation(name)
}

func (c *EpisodeClient) UpdateEpisode(ctx context.Context, req *multimediapb.UpdateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	return c.internalClient.UpdateEpisode(ctx, req, opts...)
}

func (c *EpisodeClient) DeleteEpisode(ctx context.Context, req *multimediapb.DeleteEpisodeRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteEpisode(ctx, req, opts...)
}

// ReconcileEpisodes reconcile episodes with the search and knowledge base.
func (c *EpisodeClient) ReconcileEpisodes(ctx context.Context, req *multimediapb.ReconcileEpisodesRequest, opts ...gax.CallOption) (*ReconcileEpisodesOperation, error) {
	return c.internalClient.ReconcileEpisodes(ctx, req, opts...)
}

// ReconcileEpisodesOperation returns a new ReconcileEpisodesOperation from a given name.
// The name must be that of a previously created ReconcileEpisodesOperation, possibly from a different process.
func (c *EpisodeClient) ReconcileEpisodesOperation(name string) *ReconcileEpisodesOperation {
	return c.internalClient.ReconcileEpisodesOperation(name)
}

// episodeGRPCClient is a client for interacting with Multimedia API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type episodeGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing EpisodeClient
	CallOptions **EpisodeCallOptions

	// The gRPC API client.
	episodeClient multimediapb.EpisodeServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewEpisodeClient creates a new episode service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewEpisodeClient(ctx context.Context, opts ...option.ClientOption) (*EpisodeClient, error) {
	clientOpts := defaultEpisodeGRPCClientOptions()
	if newEpisodeClientHook != nil {
		hookOpts, err := newEpisodeClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := EpisodeClient{CallOptions: defaultEpisodeCallOptions()}

	c := &episodeGRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		episodeClient:    multimediapb.NewEpisodeServiceClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *episodeGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *episodeGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *episodeGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type episodeRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD

	// Points back to the CallOptions field of the containing EpisodeClient
	CallOptions **EpisodeCallOptions
}

// NewEpisodeRESTClient creates a new episode service rest client.
func NewEpisodeRESTClient(ctx context.Context, opts ...option.ClientOption) (*EpisodeClient, error) {
	clientOpts := append(defaultEpisodeRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultEpisodeRESTCallOptions()
	c := &episodeRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	lroOpts := []option.ClientOption{
		option.WithHTTPClient(httpClient),
		option.WithEndpoint(endpoint),
	}
	opClient, err := lroauto.NewOperationsRESTClient(ctx, lroOpts...)
	if err != nil {
		return nil, err
	}
	c.LROClient = &opClient

	return &EpisodeClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultEpisodeRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://multimedia.animeapis.com"),
		internaloption.WithDefaultMTLSEndpoint("https://multimedia.animeapis.com"),
		internaloption.WithDefaultAudience("https://multimedia.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *episodeRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *episodeRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *episodeRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *episodeGRPCClient) GetEpisode(ctx context.Context, req *multimediapb.GetEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetEpisode[0:len((*c.CallOptions).GetEpisode):len((*c.CallOptions).GetEpisode)], opts...)
	var resp *multimediapb.Episode
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.GetEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *episodeGRPCClient) ListEpisodes(ctx context.Context, req *multimediapb.ListEpisodesRequest, opts ...gax.CallOption) *EpisodeIterator {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ListEpisodes[0:len((*c.CallOptions).ListEpisodes):len((*c.CallOptions).ListEpisodes)], opts...)
	it := &EpisodeIterator{}
	req = proto.Clone(req).(*multimediapb.ListEpisodesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*multimediapb.Episode, string, error) {
		resp := &multimediapb.ListEpisodesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.episodeClient.ListEpisodes(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetEpisodes(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *episodeGRPCClient) CreateEpisode(ctx context.Context, req *multimediapb.CreateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).CreateEpisode[0:len((*c.CallOptions).CreateEpisode):len((*c.CallOptions).CreateEpisode)], opts...)
	var resp *multimediapb.Episode
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.CreateEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *episodeGRPCClient) BatchCreateEpisodes(ctx context.Context, req *multimediapb.BatchCreateEpisodesRequest, opts ...gax.CallOption) (*BatchCreateEpisodesOperation, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).BatchCreateEpisodes[0:len((*c.CallOptions).BatchCreateEpisodes):len((*c.CallOptions).BatchCreateEpisodes)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.BatchCreateEpisodes(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &BatchCreateEpisodesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *episodeGRPCClient) UpdateEpisode(ctx context.Context, req *multimediapb.UpdateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "episode.name", url.QueryEscape(req.GetEpisode().GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateEpisode[0:len((*c.CallOptions).UpdateEpisode):len((*c.CallOptions).UpdateEpisode)], opts...)
	var resp *multimediapb.Episode
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.UpdateEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *episodeGRPCClient) DeleteEpisode(ctx context.Context, req *multimediapb.DeleteEpisodeRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteEpisode[0:len((*c.CallOptions).DeleteEpisode):len((*c.CallOptions).DeleteEpisode)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.episodeClient.DeleteEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *episodeGRPCClient) ReconcileEpisodes(ctx context.Context, req *multimediapb.ReconcileEpisodesRequest, opts ...gax.CallOption) (*ReconcileEpisodesOperation, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ReconcileEpisodes[0:len((*c.CallOptions).ReconcileEpisodes):len((*c.CallOptions).ReconcileEpisodes)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.ReconcileEpisodes(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ReconcileEpisodesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *episodeRESTClient) GetEpisode(ctx context.Context, req *multimediapb.GetEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v", req.GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	opts = append((*c.CallOptions).GetEpisode[0:len((*c.CallOptions).GetEpisode):len((*c.CallOptions).GetEpisode)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &multimediapb.Episode{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *episodeRESTClient) ListEpisodes(ctx context.Context, req *multimediapb.ListEpisodesRequest, opts ...gax.CallOption) *EpisodeIterator {
	it := &EpisodeIterator{}
	req = proto.Clone(req).(*multimediapb.ListEpisodesRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*multimediapb.Episode, string, error) {
		resp := &multimediapb.ListEpisodesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1alpha1/%v/episodes", req.GetParent())

		params := url.Values{}
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		headers := buildHeaders(ctx, c.xGoogMetadata, metadata.Pairs("Content-Type", "application/json"))
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := ioutil.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return maybeUnknownEnum(err)
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetEpisodes(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
func (c *episodeRESTClient) CreateEpisode(ctx context.Context, req *multimediapb.CreateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v/episodes", req.GetParent())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	opts = append((*c.CallOptions).CreateEpisode[0:len((*c.CallOptions).CreateEpisode):len((*c.CallOptions).CreateEpisode)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &multimediapb.Episode{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *episodeRESTClient) BatchCreateEpisodes(ctx context.Context, req *multimediapb.BatchCreateEpisodesRequest, opts ...gax.CallOption) (*BatchCreateEpisodesOperation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v/episodes:batchCreate", req.GetParent())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1alpha1/%s", resp.GetName())
	return &BatchCreateEpisodesOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

func (c *episodeRESTClient) UpdateEpisode(ctx context.Context, req *multimediapb.UpdateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v", req.GetEpisode().GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "episode.name", url.QueryEscape(req.GetEpisode().GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	opts = append((*c.CallOptions).UpdateEpisode[0:len((*c.CallOptions).UpdateEpisode):len((*c.CallOptions).UpdateEpisode)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &multimediapb.Episode{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PATCH", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *episodeRESTClient) DeleteEpisode(ctx context.Context, req *multimediapb.DeleteEpisodeRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v", req.GetName())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}

// ReconcileEpisodes reconcile episodes with the search and knowledge base.
func (c *episodeRESTClient) ReconcileEpisodes(ctx context.Context, req *multimediapb.ReconcileEpisodesRequest, opts ...gax.CallOption) (*ReconcileEpisodesOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha1/%v/episodes:reconcile", req.GetParent())

	// Build HTTP headers from client and context metadata.
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent())))

	headers := buildHeaders(ctx, c.xGoogMetadata, md, metadata.Pairs("Content-Type", "application/json"))
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := ioutil.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return maybeUnknownEnum(err)
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1alpha1/%s", resp.GetName())
	return &ReconcileEpisodesOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// BatchCreateEpisodesOperation manages a long-running operation from BatchCreateEpisodes.
type BatchCreateEpisodesOperation struct {
	lro      *longrunning.Operation
	pollPath string
}

// BatchCreateEpisodesOperation returns a new BatchCreateEpisodesOperation from a given name.
// The name must be that of a previously created BatchCreateEpisodesOperation, possibly from a different process.
func (c *episodeGRPCClient) BatchCreateEpisodesOperation(name string) *BatchCreateEpisodesOperation {
	return &BatchCreateEpisodesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// BatchCreateEpisodesOperation returns a new BatchCreateEpisodesOperation from a given name.
// The name must be that of a previously created BatchCreateEpisodesOperation, possibly from a different process.
func (c *episodeRESTClient) BatchCreateEpisodesOperation(name string) *BatchCreateEpisodesOperation {
	override := fmt.Sprintf("/v1alpha1/%s", name)
	return &BatchCreateEpisodesOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *BatchCreateEpisodesOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*multimediapb.BatchCreateEpisodesResponse, error) {
	opts = append([]gax.CallOption{gax.WithPath(op.pollPath)}, opts...)
	var resp multimediapb.BatchCreateEpisodesResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *BatchCreateEpisodesOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*multimediapb.BatchCreateEpisodesResponse, error) {
	opts = append([]gax.CallOption{gax.WithPath(op.pollPath)}, opts...)
	var resp multimediapb.BatchCreateEpisodesResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *BatchCreateEpisodesOperation) Metadata() (*multimediapb.OperationMetadata, error) {
	var meta multimediapb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *BatchCreateEpisodesOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *BatchCreateEpisodesOperation) Name() string {
	return op.lro.Name()
}

// ReconcileEpisodesOperation manages a long-running operation from ReconcileEpisodes.
type ReconcileEpisodesOperation struct {
	lro      *longrunning.Operation
	pollPath string
}

// ReconcileEpisodesOperation returns a new ReconcileEpisodesOperation from a given name.
// The name must be that of a previously created ReconcileEpisodesOperation, possibly from a different process.
func (c *episodeGRPCClient) ReconcileEpisodesOperation(name string) *ReconcileEpisodesOperation {
	return &ReconcileEpisodesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ReconcileEpisodesOperation returns a new ReconcileEpisodesOperation from a given name.
// The name must be that of a previously created ReconcileEpisodesOperation, possibly from a different process.
func (c *episodeRESTClient) ReconcileEpisodesOperation(name string) *ReconcileEpisodesOperation {
	override := fmt.Sprintf("/v1alpha1/%s", name)
	return &ReconcileEpisodesOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ReconcileEpisodesOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*multimediapb.ReconcileEpisodesResponse, error) {
	opts = append([]gax.CallOption{gax.WithPath(op.pollPath)}, opts...)
	var resp multimediapb.ReconcileEpisodesResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ReconcileEpisodesOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*multimediapb.ReconcileEpisodesResponse, error) {
	opts = append([]gax.CallOption{gax.WithPath(op.pollPath)}, opts...)
	var resp multimediapb.ReconcileEpisodesResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ReconcileEpisodesOperation) Metadata() (*multimediapb.OperationMetadata, error) {
	var meta multimediapb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ReconcileEpisodesOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ReconcileEpisodesOperation) Name() string {
	return op.lro.Name()
}

// EpisodeIterator manages a stream of *multimediapb.Episode.
type EpisodeIterator struct {
	items    []*multimediapb.Episode
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*multimediapb.Episode, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *EpisodeIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *EpisodeIterator) Next() (*multimediapb.Episode, error) {
	var item *multimediapb.Episode
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *EpisodeIterator) bufLen() int {
	return len(it.items)
}

func (it *EpisodeIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
