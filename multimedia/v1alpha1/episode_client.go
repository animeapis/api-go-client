// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package multimedia

import (
	"context"
	"fmt"
	"math"
	"net/url"

	multimediapb "github.com/animeapis/go-genproto/multimedia/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newEpisodeClientHook clientHook

// EpisodeCallOptions contains the retry settings for each method of EpisodeClient.
type EpisodeCallOptions struct {
	GetEpisode    []gax.CallOption
	ListEpisodes  []gax.CallOption
	CreateEpisode []gax.CallOption
	UpdateEpisode []gax.CallOption
	DeleteEpisode []gax.CallOption
}

func defaultEpisodeGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://multimedia.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultEpisodeCallOptions() *EpisodeCallOptions {
	return &EpisodeCallOptions{
		GetEpisode:    []gax.CallOption{},
		ListEpisodes:  []gax.CallOption{},
		CreateEpisode: []gax.CallOption{},
		UpdateEpisode: []gax.CallOption{},
		DeleteEpisode: []gax.CallOption{},
	}
}

// internalEpisodeClient is an interface that defines the methods availaible from Multimedia API.
type internalEpisodeClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetEpisode(context.Context, *multimediapb.GetEpisodeRequest, ...gax.CallOption) (*multimediapb.Episode, error)
	ListEpisodes(context.Context, *multimediapb.ListEpisodesRequest, ...gax.CallOption) *EpisodeIterator
	CreateEpisode(context.Context, *multimediapb.CreateEpisodeRequest, ...gax.CallOption) (*multimediapb.Episode, error)
	UpdateEpisode(context.Context, *multimediapb.UpdateEpisodeRequest, ...gax.CallOption) (*multimediapb.Episode, error)
	DeleteEpisode(context.Context, *multimediapb.DeleteEpisodeRequest, ...gax.CallOption) error
}

// EpisodeClient is a client for interacting with Multimedia API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type EpisodeClient struct {
	// The internal transport-dependent client.
	internalClient internalEpisodeClient

	// The call options for this service.
	CallOptions *EpisodeCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *EpisodeClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *EpisodeClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *EpisodeClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *EpisodeClient) GetEpisode(ctx context.Context, req *multimediapb.GetEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	return c.internalClient.GetEpisode(ctx, req, opts...)
}

func (c *EpisodeClient) ListEpisodes(ctx context.Context, req *multimediapb.ListEpisodesRequest, opts ...gax.CallOption) *EpisodeIterator {
	return c.internalClient.ListEpisodes(ctx, req, opts...)
}

func (c *EpisodeClient) CreateEpisode(ctx context.Context, req *multimediapb.CreateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	return c.internalClient.CreateEpisode(ctx, req, opts...)
}

func (c *EpisodeClient) UpdateEpisode(ctx context.Context, req *multimediapb.UpdateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	return c.internalClient.UpdateEpisode(ctx, req, opts...)
}

func (c *EpisodeClient) DeleteEpisode(ctx context.Context, req *multimediapb.DeleteEpisodeRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteEpisode(ctx, req, opts...)
}

// episodeGRPCClient is a client for interacting with Multimedia API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type episodeGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing EpisodeClient
	CallOptions **EpisodeCallOptions

	// The gRPC API client.
	episodeClient multimediapb.EpisodeServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewEpisodeClient creates a new episode service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewEpisodeClient(ctx context.Context, opts ...option.ClientOption) (*EpisodeClient, error) {
	clientOpts := defaultEpisodeGRPCClientOptions()
	if newEpisodeClientHook != nil {
		hookOpts, err := newEpisodeClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := EpisodeClient{CallOptions: defaultEpisodeCallOptions()}

	c := &episodeGRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		episodeClient:    multimediapb.NewEpisodeServiceClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *episodeGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *episodeGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *episodeGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *episodeGRPCClient) GetEpisode(ctx context.Context, req *multimediapb.GetEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetEpisode[0:len((*c.CallOptions).GetEpisode):len((*c.CallOptions).GetEpisode)], opts...)
	var resp *multimediapb.Episode
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.GetEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *episodeGRPCClient) ListEpisodes(ctx context.Context, req *multimediapb.ListEpisodesRequest, opts ...gax.CallOption) *EpisodeIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListEpisodes[0:len((*c.CallOptions).ListEpisodes):len((*c.CallOptions).ListEpisodes)], opts...)
	it := &EpisodeIterator{}
	req = proto.Clone(req).(*multimediapb.ListEpisodesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*multimediapb.Episode, string, error) {
		var resp *multimediapb.ListEpisodesResponse
		req.PageToken = pageToken
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.episodeClient.ListEpisodes(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetEpisodes(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}
	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()
	return it
}

func (c *episodeGRPCClient) CreateEpisode(ctx context.Context, req *multimediapb.CreateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateEpisode[0:len((*c.CallOptions).CreateEpisode):len((*c.CallOptions).CreateEpisode)], opts...)
	var resp *multimediapb.Episode
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.CreateEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *episodeGRPCClient) UpdateEpisode(ctx context.Context, req *multimediapb.UpdateEpisodeRequest, opts ...gax.CallOption) (*multimediapb.Episode, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "episode.name", url.QueryEscape(req.GetEpisode().GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateEpisode[0:len((*c.CallOptions).UpdateEpisode):len((*c.CallOptions).UpdateEpisode)], opts...)
	var resp *multimediapb.Episode
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.episodeClient.UpdateEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *episodeGRPCClient) DeleteEpisode(ctx context.Context, req *multimediapb.DeleteEpisodeRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteEpisode[0:len((*c.CallOptions).DeleteEpisode):len((*c.CallOptions).DeleteEpisode)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.episodeClient.DeleteEpisode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

// EpisodeIterator manages a stream of *multimediapb.Episode.
type EpisodeIterator struct {
	items    []*multimediapb.Episode
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*multimediapb.Episode, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *EpisodeIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *EpisodeIterator) Next() (*multimediapb.Episode, error) {
	var item *multimediapb.Episode
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *EpisodeIterator) bufLen() int {
	return len(it.items)
}

func (it *EpisodeIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
