// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package multimedia

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	multimediapb "github.com/animeapis/go-genproto/multimedia/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/proto"
)

var newVisualNovelClientHook clientHook

// VisualNovelCallOptions contains the retry settings for each method of VisualNovelClient.
type VisualNovelCallOptions struct {
	GetVisualNovel        []gax.CallOption
	ListVisualNovels      []gax.CallOption
	CreateVisualNovel     []gax.CallOption
	UpdateVisualNovel     []gax.CallOption
	DeleteVisualNovel     []gax.CallOption
	ReconcileVisualNovels []gax.CallOption
}

func defaultVisualNovelGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("multimedia.animeapis.com:443"),
		internaloption.WithDefaultAudience("https://multimedia.animeapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultVisualNovelCallOptions() *VisualNovelCallOptions {
	return &VisualNovelCallOptions{
		GetVisualNovel:        []gax.CallOption{},
		ListVisualNovels:      []gax.CallOption{},
		CreateVisualNovel:     []gax.CallOption{},
		UpdateVisualNovel:     []gax.CallOption{},
		DeleteVisualNovel:     []gax.CallOption{},
		ReconcileVisualNovels: []gax.CallOption{},
	}
}

// internalVisualNovelClient is an interface that defines the methods available from Multimedia API.
type internalVisualNovelClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetVisualNovel(context.Context, *multimediapb.GetVisualNovelRequest, ...gax.CallOption) (*multimediapb.VisualNovel, error)
	ListVisualNovels(context.Context, *multimediapb.ListVisualNovelsRequest, ...gax.CallOption) *VisualNovelIterator
	CreateVisualNovel(context.Context, *multimediapb.CreateVisualNovelRequest, ...gax.CallOption) (*multimediapb.VisualNovel, error)
	UpdateVisualNovel(context.Context, *multimediapb.UpdateVisualNovelRequest, ...gax.CallOption) (*multimediapb.VisualNovel, error)
	DeleteVisualNovel(context.Context, *multimediapb.DeleteVisualNovelRequest, ...gax.CallOption) error
	ReconcileVisualNovels(context.Context, *multimediapb.ReconcileVisualNovelsRequest, ...gax.CallOption) (*ReconcileVisualNovelsOperation, error)
	ReconcileVisualNovelsOperation(name string) *ReconcileVisualNovelsOperation
}

// VisualNovelClient is a client for interacting with Multimedia API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type VisualNovelClient struct {
	// The internal transport-dependent client.
	internalClient internalVisualNovelClient

	// The call options for this service.
	CallOptions *VisualNovelCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *VisualNovelClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *VisualNovelClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *VisualNovelClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

func (c *VisualNovelClient) GetVisualNovel(ctx context.Context, req *multimediapb.GetVisualNovelRequest, opts ...gax.CallOption) (*multimediapb.VisualNovel, error) {
	return c.internalClient.GetVisualNovel(ctx, req, opts...)
}

func (c *VisualNovelClient) ListVisualNovels(ctx context.Context, req *multimediapb.ListVisualNovelsRequest, opts ...gax.CallOption) *VisualNovelIterator {
	return c.internalClient.ListVisualNovels(ctx, req, opts...)
}

func (c *VisualNovelClient) CreateVisualNovel(ctx context.Context, req *multimediapb.CreateVisualNovelRequest, opts ...gax.CallOption) (*multimediapb.VisualNovel, error) {
	return c.internalClient.CreateVisualNovel(ctx, req, opts...)
}

func (c *VisualNovelClient) UpdateVisualNovel(ctx context.Context, req *multimediapb.UpdateVisualNovelRequest, opts ...gax.CallOption) (*multimediapb.VisualNovel, error) {
	return c.internalClient.UpdateVisualNovel(ctx, req, opts...)
}

func (c *VisualNovelClient) DeleteVisualNovel(ctx context.Context, req *multimediapb.DeleteVisualNovelRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteVisualNovel(ctx, req, opts...)
}

// ReconcileVisualNovels reconcile visual novels with the search and knowledge base.
func (c *VisualNovelClient) ReconcileVisualNovels(ctx context.Context, req *multimediapb.ReconcileVisualNovelsRequest, opts ...gax.CallOption) (*ReconcileVisualNovelsOperation, error) {
	return c.internalClient.ReconcileVisualNovels(ctx, req, opts...)
}

// ReconcileVisualNovelsOperation returns a new ReconcileVisualNovelsOperation from a given name.
// The name must be that of a previously created ReconcileVisualNovelsOperation, possibly from a different process.
func (c *VisualNovelClient) ReconcileVisualNovelsOperation(name string) *ReconcileVisualNovelsOperation {
	return c.internalClient.ReconcileVisualNovelsOperation(name)
}

// visualNovelGRPCClient is a client for interacting with Multimedia API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type visualNovelGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing VisualNovelClient
	CallOptions **VisualNovelCallOptions

	// The gRPC API client.
	visualNovelClient multimediapb.VisualNovelServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewVisualNovelClient creates a new visual novel service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewVisualNovelClient(ctx context.Context, opts ...option.ClientOption) (*VisualNovelClient, error) {
	clientOpts := defaultVisualNovelGRPCClientOptions()
	if newVisualNovelClientHook != nil {
		hookOpts, err := newVisualNovelClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := VisualNovelClient{CallOptions: defaultVisualNovelCallOptions()}

	c := &visualNovelGRPCClient{
		connPool:          connPool,
		disableDeadlines:  disableDeadlines,
		visualNovelClient: multimediapb.NewVisualNovelServiceClient(connPool),
		CallOptions:       &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *visualNovelGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *visualNovelGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *visualNovelGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *visualNovelGRPCClient) GetVisualNovel(ctx context.Context, req *multimediapb.GetVisualNovelRequest, opts ...gax.CallOption) (*multimediapb.VisualNovel, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetVisualNovel[0:len((*c.CallOptions).GetVisualNovel):len((*c.CallOptions).GetVisualNovel)], opts...)
	var resp *multimediapb.VisualNovel
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.visualNovelClient.GetVisualNovel(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *visualNovelGRPCClient) ListVisualNovels(ctx context.Context, req *multimediapb.ListVisualNovelsRequest, opts ...gax.CallOption) *VisualNovelIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListVisualNovels[0:len((*c.CallOptions).ListVisualNovels):len((*c.CallOptions).ListVisualNovels)], opts...)
	it := &VisualNovelIterator{}
	req = proto.Clone(req).(*multimediapb.ListVisualNovelsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*multimediapb.VisualNovel, string, error) {
		resp := &multimediapb.ListVisualNovelsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.visualNovelClient.ListVisualNovels(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetVisualNovels(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *visualNovelGRPCClient) CreateVisualNovel(ctx context.Context, req *multimediapb.CreateVisualNovelRequest, opts ...gax.CallOption) (*multimediapb.VisualNovel, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateVisualNovel[0:len((*c.CallOptions).CreateVisualNovel):len((*c.CallOptions).CreateVisualNovel)], opts...)
	var resp *multimediapb.VisualNovel
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.visualNovelClient.CreateVisualNovel(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *visualNovelGRPCClient) UpdateVisualNovel(ctx context.Context, req *multimediapb.UpdateVisualNovelRequest, opts ...gax.CallOption) (*multimediapb.VisualNovel, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "visual_novel.name", url.QueryEscape(req.GetVisualNovel().GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).UpdateVisualNovel[0:len((*c.CallOptions).UpdateVisualNovel):len((*c.CallOptions).UpdateVisualNovel)], opts...)
	var resp *multimediapb.VisualNovel
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.visualNovelClient.UpdateVisualNovel(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *visualNovelGRPCClient) DeleteVisualNovel(ctx context.Context, req *multimediapb.DeleteVisualNovelRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteVisualNovel[0:len((*c.CallOptions).DeleteVisualNovel):len((*c.CallOptions).DeleteVisualNovel)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.visualNovelClient.DeleteVisualNovel(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *visualNovelGRPCClient) ReconcileVisualNovels(ctx context.Context, req *multimediapb.ReconcileVisualNovelsRequest, opts ...gax.CallOption) (*ReconcileVisualNovelsOperation, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName())))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).ReconcileVisualNovels[0:len((*c.CallOptions).ReconcileVisualNovels):len((*c.CallOptions).ReconcileVisualNovels)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.visualNovelClient.ReconcileVisualNovels(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ReconcileVisualNovelsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

// ReconcileVisualNovelsOperation manages a long-running operation from ReconcileVisualNovels.
type ReconcileVisualNovelsOperation struct {
	lro *longrunning.Operation
}

// ReconcileVisualNovelsOperation returns a new ReconcileVisualNovelsOperation from a given name.
// The name must be that of a previously created ReconcileVisualNovelsOperation, possibly from a different process.
func (c *visualNovelGRPCClient) ReconcileVisualNovelsOperation(name string) *ReconcileVisualNovelsOperation {
	return &ReconcileVisualNovelsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *ReconcileVisualNovelsOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*multimediapb.ReconcileVisualNovelsResponse, error) {
	var resp multimediapb.ReconcileVisualNovelsResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *ReconcileVisualNovelsOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*multimediapb.ReconcileVisualNovelsResponse, error) {
	var resp multimediapb.ReconcileVisualNovelsResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *ReconcileVisualNovelsOperation) Metadata() (*multimediapb.OperationMetadata, error) {
	var meta multimediapb.OperationMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *ReconcileVisualNovelsOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *ReconcileVisualNovelsOperation) Name() string {
	return op.lro.Name()
}

// VisualNovelIterator manages a stream of *multimediapb.VisualNovel.
type VisualNovelIterator struct {
	items    []*multimediapb.VisualNovel
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*multimediapb.VisualNovel, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *VisualNovelIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *VisualNovelIterator) Next() (*multimediapb.VisualNovel, error) {
	var item *multimediapb.VisualNovel
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *VisualNovelIterator) bufLen() int {
	return len(it.items)
}

func (it *VisualNovelIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
